{"version":3,"sources":["../src/Collada.js"],"names":["isWorker","global","document","undefined","DEG2RAD","Math","PI","temp_mat4","temp_vec2","temp_vec3","temp_vec4","temp_quat","request","url","callback","req","XMLHttpRequest","onload","response","status","open","send","Collada","libsPath","workerPath","no_flip","use_transferables","onerror","verbose","config","forceParser","init","i","importScripts","err","throwException","LIBMISSING_ERROR","create","vec3","console","log","load","data","parse","_xmlroot","_nodes_by_id","_transferables","_controllers_found","_geometries_found","safeString","str","convertID","replace","NOXMLPARSER_ERROR","msg","self","postMessage","action","getFilename","filename","pos","lastIndexOf","substr","last_name","generateName","v","name","options","Date","now","flip","xmlparser","root","DOMParser","parseFromString","DOMImplementation","loadXML","by_ids","l","all","length","node","id","getAttribute","extra_functions","DOMDocument","prototype","querySelector","DOMElement","selector","tags","split","current_element","current","shift","tokens","tagname","elements","getElementsByTagName","childNodes","item","querySelectorAll","result","inner","push","concat","list","DOMNodeList","documentElement","_nodes","Object","defineProperty","get","nodes","getChildNodes","toString","set","xmlcollada","_current_DAE_version","xmlvisual_scene","scene","object_type","light","materials","meshes","resources","children","external_files","xmlasset","metadata","readAsset","xmlnodes","localName","readNodeTree","readNodeInfo","readLibraryControllers","animations","readAnimations","animations_name","indexOf","images","readImages","xmlchild","nodeType","tool","textContext","textContent","xmlnode","level","node_id","node_sid","_depth","node_type","type","node_name","model","readTransform","child_node","parent","sid","warn","mesh_id","mesh","mesh_data","readGeometry","xmlmaterials","iMat","xmlmaterial","matname","material","readMaterial","xmlcontroller","readController","xmlbind_material","xmltechniques","iTec","xmltechnique","xmlinstance_materials","xmlinstance_material","morph_targets","readLight","readCamera","material_translate_table","light_translate_table","point","directional","spot","camera_translate_table","xfov","aspect_ratio","znear","zfar","querySelectorAndId","attr_id","getFirstChildElement","c","xmleffect","effect_url","xmleffects","xmlnewparams","newparams","init_from","innerHTML","source","xmlphong","xmlparam","param_name","xmlparam_value","value","readContentAsFloats","subarray","textures","map_id","getParentParam","path","map_info","uvs","param","xmlliblights","xml","xmls","xml2","j","parse_params","intensity","child","color","angle_end","angle","position","forward","target","camera","tag","translated","parseFloat","yfov","fov","aspect","matrix","temp","tmpq","flip_fix","transformMatrix","values","tmp","translate","setAxisAngle","fromQuat","multiply","scale","readTransform2","rotation","tmpmatrix","fromValues","xmlgeometry","getElementById","geometry","xmlmesh","sources","xmlsources","xmlsource","float_array","floats","xmlaccessor","stride","parseInt","xmlvertices","vertices_source","xmlpolygons","readTriangles","xmltriangles","xmlpolylist","readPolylist","xmllinestrip","readLineStrip","array","vertices","normals","buffer","use_indices","groups","buffers","last_index","facemap","vertex_remap","indicesArray","last_start","group_name","material_name","tris","xml_shape_root","triangles","readShapeInputs","xmlps","num_data_vertex","xmlp","trim","first_index","current_index","prev_index","num_values_per_vertex","b","max","current_data_pos","k","vertex_id","slice","join","hasOwnProperty","index","x","group","start","Float32Array","info","_remap","Uint32Array","transformMeshInfo","xmlvcount","vcount","readContentAsUInt32","num_vertices","xmlinputs","xmlinput","semantic","toUpperCase","stream_source","offset","data_set","translator","toLowerCase","Uint16Array","primitive","findXMLNodeById","nodename","n","childs","xmlimages","xmlimages_childs","xmlimage","xmlinitfrom","map","xmlanimations","xmlanimation_childs","takes","default_take","tracks","xmlanimation","anim_id","xmlanimation2_childs","xmlanimation2","readAnimation","max_time","duration","xmlchannel_list","anim","readChannel","xmlchannel","xmlsampler","error","inputs","params","time_data","source_name","data_array","xmlfloatarray","locator","property","element_size","param_type","value_size","value_data","num_samples","sample_size","anim_data","findNode","ret","xmllibrarycontrollers","xmllibrarycontrollers_childs","xmlskin","readSkinController","xmlmorph","readMorphController","id_geometry","readSources","bind_matrix","xmlbindmatrix","joints","xmljoints","joints_source","inv_bind_source","sem","src","inv_mat","xmlvertexweights","weights_indexed_array","xmlv","weights_array","bone_index_array","Uint8Array","remap","max_bone","num_bones","w","sum","inv_sum","final_weights","final_bone_indices","used_joints","p","max_pos","max_value","new_bones","bones_translation","weights","bone_indices","bones","base_mesh","morphs","xmltargets","targets","weight","readBindMaterials","name_array","names","readContentAsStringsArray","ref_array","text","numbers","count","words","merged_words","max3d_matrix_0","first_level","inverted","transpose","vec4","M","m"],"mappings":"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","file":"Collada.js","sourcesContent":["// Collada.js\n\nimport { mat4, quat } from 'gl-matrix';\n\nvar isWorker = global.document === undefined;\nvar DEG2RAD = Math.PI * 2 / 360;\n\n//global temporal variables\nvar temp_mat4 = null;\nvar temp_vec2 = null;\nvar temp_vec3 = null;\nvar temp_vec4 = null;\nvar temp_quat = null;\n\n\nfunction request(url, callback)\n{\n\tvar req = new XMLHttpRequest();\n\treq.onload = function() {\n\t\tvar response = this.response;\n\t\tif(this.status != 200)\n\t\t\treturn;\n\t\tif(callback)\n\t\t\tcallback(this.response);\n\t};\n\treq.open(\"get\", url, true);\n\treq.send();\n}\n\nconst Collada = {\n\n\tlibsPath: \"./\",\n\tworkerPath: \"./\",\n\tno_flip: true,\n\tuse_transferables: true, //for workers\n\tonerror: null,\n\tverbose: false,\n\tconfig: { forceParser:false },\n\n\tinit: function (config)\n\t{\n\t\tconfig = config || {}\n\t\tfor(var i in config)\n\t\t\tthis[i] = config[i];\n\t\tthis.config = config;\n\n\t\tif( isWorker )\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\timportScripts( this.libsPath + \"gl-matrix-min.js\", this.libsPath + \"tinyxml.js\" );\n\t\t\t}\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t\tCollada.throwException( Collada.LIBMISSING_ERROR );\n\t\t\t}\n\t\t}\n\n\t\t//init glMatrix\n\t\ttemp_mat4 = mat4.create();\n\t\ttemp_vec2 = vec3.create();\n\t\ttemp_vec3 = vec3.create();\n\t\ttemp_vec4 = vec3.create();\n\t\ttemp_quat = quat.create();\n\n\t\tif( isWorker )\n\t\t\tconsole.log(\"Collada worker ready\");\n\t},\n\n\tload: function(url, callback)\n\t{\n\t\trequest(url, function(data)\n\t\t{\n\t\t\tif(!data)\n\t\t\t\tcallback( null );\n\t\t\telse\n\t\t\t\tcallback( Collada.parse( data ) );\n\t\t});\n\t},\n\n\t_xmlroot: null,\n\t_nodes_by_id: null,\n\t_transferables: null,\n\t_controllers_found: null,\n\t_geometries_found: null,\n\n\tsafeString: function (str) { \n\t\tif(!str)\n\t\t\treturn \"\";\n\n\t\tif(this.convertID)\n\t\t\treturn this.convertID(str);\n\n\t\treturn str.replace(/ /g,\"_\"); \n\t},\n\n\tLIBMISSING_ERROR: \"Libraries loading error, when using workers remember to pass the URL to the tinyxml.js in the options.libsPath\",\n\tNOXMLPARSER_ERROR: \"TinyXML not found, when using workers remember to pass the URL to the tinyxml.js in the options.libsPath (Workers do not allow to access the native XML DOMParser)\",\n\tthrowException: function(msg)\n\t{\n\t\tif(isWorker)\n\t\t\tself.postMessage({action:\"exception\", msg: msg});\n\t\telse\n\t\t\tif(Collada.onerror)\n\t\t\t\tCollada.onerror(msg);\n\t\tthrow(msg);\n\t},\n\n\tgetFilename: function(filename)\n\t{\n\t\tvar pos = filename.lastIndexOf(\"\\\\\");\n\t\tif(pos != -1)\n\t\t\tfilename = filename.substr(pos+1);\n\t\t//strip unix slashes\n\t\tpos = filename.lastIndexOf(\"/\");\n\t\tif(pos != -1)\n\t\t\tfilename = filename.substr(pos+1);\n\t\treturn filename;\n\t},\n\n\tlast_name: 0,\n\n\tgenerateName: function(v)\n\t{\n\t\tv = v || \"name_\";\n\t\tvar name = v + this.last_name;\n\t\tthis.last_name++;\n\t\treturn name;\n\t},\n\n\tparse: function(data, options, filename)\n\t{\n\t\toptions = options || {};\n\t\tfilename = filename || \"_dae_\" + Date.now() + \".dae\";\n\n\t\t//console.log(\"Parsing collada\");\n\t\tvar flip = false;\n\n\t\tvar xmlparser = null;\n\t\tvar root = null;\n\t\tthis._transferables = [];\n\t\t\n\t\tif(this.verbose)\n\t\t\tconsole.log(\" - XML parsing...\");\n\n\t\tif(global[\"DOMParser\"] && !this.config.forceParser )\n\t\t{\n\t\t\txmlparser = new DOMParser();\n\t\t\troot = xmlparser.parseFromString(data,\"text/xml\");\n\t\t\tif(this.verbose)\n\t\t\t\tconsole.log(\" - XML parsed\");\t\t\t\n\t\t}\n\t\telse //USING JS XML PARSER IMPLEMENTATION (much slower)\n\t\t{\n\t\t\tif(!global[\"DOMImplementation\"] )\n\t\t\t\treturn Collada.throwException( Collada.NOXMLPARSER_ERROR );\n\t\t\t//use tinyxmlparser\n\t\t\ttry\n\t\t\t{\n\t\t\t\txmlparser = new DOMImplementation();\n\t\t\t}\n\t\t\tcatch (err)\n\t\t\t{\n\t\t\t\treturn Collada.throwException( Collada.NOXMLPARSER_ERROR );\n\t\t\t}\n\n\t\t\troot = xmlparser.loadXML(data);\n\t\t\tif(this.verbose)\n\t\t\t\tconsole.log(\" - XML parsed\");\n\n\t\t\t//for every node...\n\t\t\tvar by_ids = root._nodes_by_id = {};\n\t\t\tfor(var i = 0, l = root.all.length; i < l; ++i)\n\t\t\t{\n\t\t\t\tvar node = root.all[i];\n\t\t\t\tby_ids[ node.id ] = node;\n\t\t\t\tif(node.getAttribute(\"sid\"))\n\t\t\t\t\tby_ids[ node.getAttribute(\"sid\") ] = node;\n\t\t\t}\n\n\t\t\tif(!this.extra_functions)\n\t\t\t{\n\t\t\t\tthis.extra_functions = true;\n\t\t\t\t//these methods are missing so here is a lousy implementation\n\t\t\t\tDOMDocument.prototype.querySelector = DOMElement.prototype.querySelector = function(selector)\n\t\t\t\t{\n\t\t\t\t\tvar tags = selector.split(\" \");\n\t\t\t\t\tvar current_element = this;\n\n\t\t\t\t\twhile(tags.length)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar current = tags.shift();\n\t\t\t\t\t\tvar tokens = current.split(\"#\");\n\t\t\t\t\t\tvar tagname = tokens[0];\n\t\t\t\t\t\tvar id = tokens[1];\n\t\t\t\t\t\tvar elements = tagname ? current_element.getElementsByTagName(tagname) : current_element.childNodes;\n\t\t\t\t\t\tif(!id) //no id filter\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(tags.length == 0)\n\t\t\t\t\t\t\t\treturn elements.item(0);\n\t\t\t\t\t\t\tcurrent_element = elements.item(0);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//has id? check for all to see if one matches the id\n\t\t\t\t\t\tfor(var i = 0; i < elements.length; i++)\n\t\t\t\t\t\t\tif( elements.item(i).getAttribute(\"id\") == id)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(tags.length == 0)\n\t\t\t\t\t\t\t\t\treturn elements.item(i);\n\t\t\t\t\t\t\t\tcurrent_element = elements.item(i);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tDOMDocument.prototype.querySelectorAll = DOMElement.prototype.querySelectorAll = function( selector )\n\t\t\t\t{\n\t\t\t\t\tvar tags = selector.split(\" \");\n\t\t\t\t\tif(tags.length == 1)\n\t\t\t\t\t\treturn this.getElementsByTagName( selector );\n\n\t\t\t\t\tvar current_element = this;\n\t\t\t\t\tvar result = [];\n\n\t\t\t\t\tinner(this, tags);\n\n\t\t\t\t\tfunction inner(root, tags )\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!tags)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\tvar current = tags.shift();\n\t\t\t\t\t\tvar elements = root.getElementsByTagName( current );\n\t\t\t\t\t\tif(tags.length == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor(var i = 0; i < elements.length; i++)\n\t\t\t\t\t\t\t\tresult.push( elements.item(i) );\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor(var i = 0; i < elements.length; i++)\n\t\t\t\t\t\t\tinner( elements.item(i), tags.concat() );\n\t\t\t\t\t}\n\n\t\t\t\t\tvar list = new DOMNodeList(this.documentElement);\n\t\t\t\t\tlist._nodes = result;\n\t\t\t\t\tlist.length = result.length;\n\n\t\t\t\t\treturn list;\n\t\t\t\t}\n\n\t\t\t\tObject.defineProperty( DOMElement.prototype, \"textContent\", { \n\t\t\t\t\tget: function() { \n\t\t\t\t\t\tvar nodes = this.getChildNodes();\n\t\t\t\t\t\treturn nodes.item(0).toString(); \n\t\t\t\t\t},\n\t\t\t\t\tset: function() {} \n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tthis._xmlroot = root;\n\t\tvar xmlcollada = root.querySelector(\"COLLADA\");\n\t\tif(xmlcollada)\n\t\t{\n\t\t\tthis._current_DAE_version = xmlcollada.getAttribute(\"version\");\n\t\t\tconsole.log(\"DAE Version:\" + this._current_DAE_version);\n\t\t}\n\n\t\t//var xmlvisual_scene = root.querySelector(\"visual_scene\");\n\t\tvar xmlvisual_scene = root.getElementsByTagName(\"visual_scene\").item(0);\n\t\tif(!xmlvisual_scene)\n\t\t\tthrow(\"visual_scene XML node not found in DAE\");\n\n\t\t//hack to avoid problems with bones with spaces in names\n\t\tthis._nodes_by_id = {}; //clear\n\t\tthis._controllers_found = {};//we need to check what controllers had been found, in case we miss one at the end\n\t\tthis._geometries_found = {};\n\n\t\t//Create a scene tree\n\t\tvar scene = { \n\t\t\tobject_type:\"SceneTree\", \n\t\t\tlight: null,\n\t\t\tmaterials: {},\n\t\t\tmeshes: {},\n\t\t\tresources: {}, //used to store animation tracks\n\t\t\troot:{ children:[] },\n\t\t\texternal_files: {} //store info about external files mentioned in this \n\t\t};\n\n\t\t//scene metadata (like author, tool, up vector, dates, etc)\n\t\tvar xmlasset = root.getElementsByTagName(\"asset\")[0];\n\t\tif(xmlasset)\n\t\t\tscene.metadata = this.readAsset( xmlasset );\n\n\t\t//parse nodes tree to extract names and ierarchy only\n\t\tvar xmlnodes = xmlvisual_scene.childNodes;\n\t\tfor(var i = 0; i < xmlnodes.length; i++)\n\t\t{\n\t\t\tif(xmlnodes.item(i).localName != \"node\")\n\t\t\t\tcontinue;\n\n\t\t\tvar node = this.readNodeTree( xmlnodes.item(i), scene, 0, flip );\n\t\t\tif(node)\n\t\t\t\tscene.root.children.push(node);\n\t\t}\n\n\t\t//parse nodes content (two steps so we have first all the scene tree info)\n\t\tfor(var i = 0; i < xmlnodes.length; i++)\n\t\t{\n\t\t\tif(xmlnodes.item(i).localName != \"node\")\n\t\t\t\tcontinue;\n\t\t\tthis.readNodeInfo( xmlnodes.item(i), scene, 0, flip );\n\t\t}\n\n\t\t//read remaining controllers (in some cases some controllers are not linked from the nodes or the geometries)\n\t\tthis.readLibraryControllers( scene );\n\n\t\t//read animations\n\t\tvar animations = this.readAnimations(root, scene);\n\t\tif(animations)\n\t\t{\n\t\t\tvar animations_name = \"#animations_\" + filename.substr(0,filename.indexOf(\".\"));\n\t\t\tscene.resources[ animations_name ] = animations;\n\t\t\tscene.root.animations = animations_name;\n\t\t}\n\n\t\t//read external files (images)\n\t\tscene.images = this.readImages(root);\n\n\t\t//clear memory\n\t\tthis._nodes_by_id = {};\n\t\tthis._controllers_found = {};\n\t\tthis._geometries_found = {};\n\t\tthis._xmlroot = null;\n\n\t\t//console.log(scene);\n\t\treturn scene;\n\t},\n\n\t/* Collect node ids, in case there is bones (with spaces in name) I need to know the nodenames in advance */\n\t/*\n\treadAllNodeNames: function(xmlnode)\n\t{\n\t\tvar node_id = this.safeString( xmlnode.getAttribute(\"id\") );\n\t\tif(node_id)\n\t\t\tthis._nodes_by_id[node_id] = true; //node found\n\t\t//nodes seem to have to possible ids, id and sid, I guess one is unique, the other user-defined\n\t\tvar node_sid = this.safeString( xmlnode.getAttribute(\"sid\") );\n\t\tif(node_sid)\n\t\t\tthis._nodes_by_id[node_sid] = true; //node found\n\n\n\t\tfor( var i = 0; i < xmlnode.childNodes.length; i++ )\n\t\t{\n\t\t\tvar xmlchild = xmlnode.childNodes.item(i);\n\n\t\t\t//children\n\t\t\tif(xmlchild.localName != \"node\")\n\t\t\t\tcontinue;\n\t\t\tthis.readAllNodeNames(xmlchild);\n\t\t}\n\t},\n\t\t*/\n\n\treadAsset: function( xmlasset )\n\t{\n\t\tvar metadata = {};\n\n\t\tfor( var i = 0; i < xmlasset.childNodes.length; i++ )\n\t\t{\n\t\t\tvar xmlchild = xmlasset.childNodes.item(i);\n\t\t\tif(xmlchild.nodeType != 1 ) //not tag\n\t\t\t\tcontinue;\n\t\t\tswitch( xmlchild.localName )\n\t\t\t{\n\t\t\t\tcase \"contributor\": \n\t\t\t\t\tvar tool = xmlchild.querySelector(\"authoring_tool\");\n\t\t\t\t\tif(tool)\n\t\t\t\t\t\tmetadata[\"authoring_tool\"] = tool.textContext;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"unit\": metadata[\"unit\"] = xmlchild.getAttribute(\"name\"); break;\n\t\t\t\tdefault:\n\t\t\t\t\tmetadata[ xmlchild.localName ] = xmlchild.textContent; break;\n\t\t\t}\n\t\t}\n\n\t\treturn metadata;\n\t},\n\n\treadNodeTree: function(xmlnode, scene, level, flip)\n\t{\n\t\tvar node_id = this.safeString( xmlnode.getAttribute(\"id\") );\n\t\tvar node_sid = this.safeString( xmlnode.getAttribute(\"sid\") );\n\n\t\tif(!node_id && !node_sid)\n\t\t\treturn null;\n\n\t\t//here we create the node\n\t\tvar node = { \n\t\t\tid: node_sid || node_id, \n\t\t\tchildren:[], \n\t\t\t_depth: level \n\t\t};\n\n\t\tvar node_type = xmlnode.getAttribute(\"type\");\n\t\tif(node_type)\n\t\t\tnode.type = node_type;\n\n\t\tvar node_name = xmlnode.getAttribute(\"name\");\n\t\tif( node_name)\n\t\t\tnode.name = node_name;\n\t\tthis._nodes_by_id[ node.id ] = node;\n\t\tif( node_id )\n\t\t\tthis._nodes_by_id[ node_id ] = node;\n\t\tif( node_sid )\n\t\t\tthis._nodes_by_id[ node_sid ] = node;\n\n\t\t//transform\n\t\tnode.model = this.readTransform(xmlnode, level, flip );\n\n\t\t//node elements\n\t\tfor( var i = 0; i < xmlnode.childNodes.length; i++ )\n\t\t{\n\t\t\tvar xmlchild = xmlnode.childNodes.item(i);\n\t\t\tif(xmlchild.nodeType != 1 ) //not tag\n\t\t\t\tcontinue;\n\n\t\t\t//children\n\t\t\tif(xmlchild.localName == \"node\")\n\t\t\t{\n\t\t\t\tvar child_node = this.readNodeTree(xmlchild, scene, level+1, flip);\n\t\t\t\tif(child_node)\n\t\t\t\t\tnode.children.push( child_node );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\treturn node;\n\t},\n\n\treadNodeInfo: function( xmlnode, scene, level, flip, parent )\n\t{\n\t\tvar node_id = this.safeString( xmlnode.getAttribute(\"id\") );\n\t\tvar node_sid = this.safeString( xmlnode.getAttribute(\"sid\") );\n\n\t\t/*\n\t\tif(!node_id && !node_sid)\n\t\t{\n\t\t\tconsole.warn(\"Collada: node without id, creating a random one\");\n\t\t\tnode_id = this.generateName(\"node_\");\n\t\t\treturn null;\n\t\t}\n\t\t*/\n\n\t\tvar node;\n\t\tif(!node_id && !node_sid) {\n\t\t\t//if there is no id, then either all of this node's properties \n\t\t\t//should be assigned directly to its parent node, or the node doesn't\n\t\t\t//have a parent node, in which case its a light or something. \n\t\t\t//So we get the parent by its id, and if there is no parent, we return null\n\t\t\tif (parent)\n\t\t\t\tnode = this._nodes_by_id[ parent.id || parent.sid ];\n\t\t\telse \n\t\t\t\treturn null;\n\t\t} \n\t\telse\n\t\t\tnode = this._nodes_by_id[ node_id || node_sid ];\n\n\t\tif(!node)\n\t\t{\n\t\t\tconsole.warn(\"Collada: Node not found by id: \" + (node_id || node_sid));\n\t\t\treturn null;\n\t\t}\n\n\t\t//node elements\n\t\tfor( var i = 0; i < xmlnode.childNodes.length; i++ )\n\t\t{\n\t\t\tvar xmlchild = xmlnode.childNodes.item(i);\n\t\t\tif(xmlchild.nodeType != 1 ) //not tag\n\t\t\t\tcontinue;\n\n\t\t\t//children\n\t\t\tif(xmlchild.localName == \"node\")\n\t\t\t{\n\t\t\t\t//pass parent node in case child node is a 'dead' node (has no id or sid)\n\t\t\t\tthis.readNodeInfo( xmlchild, scene, level+1, flip, xmlnode );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//geometry\n\t\t\tif(xmlchild.localName == \"instance_geometry\")\n\t\t\t{\n\t\t\t\tvar url = xmlchild.getAttribute(\"url\");\n\t\t\t\tvar mesh_id = url.toString().substr(1);\n\t\t\t\tnode.mesh = mesh_id;\n\n\t\t\t\tif(!scene.meshes[ url ])\n\t\t\t\t{\n\t\t\t\t\tvar mesh_data = this.readGeometry(url, flip);\n\t\t\t\t\tif(mesh_data)\n\t\t\t\t\t{\n\t\t\t\t\t\tmesh_data.name = mesh_id;\n\t\t\t\t\t\tscene.meshes[ mesh_id ] = mesh_data;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//binded material\n\t\t\t\tvar xmlmaterials = xmlchild.querySelectorAll(\"instance_material\");\n\t\t\t\tif(xmlmaterials)\n\t\t\t\t{\n\t\t\t\t\tfor(var iMat = 0; iMat < xmlmaterials.length; ++iMat)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar xmlmaterial = xmlmaterials.item(iMat);\n\t\t\t\t\t\tif(!xmlmaterial)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconsole.warn(\"instance_material not found: \" + i);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar matname = xmlmaterial.getAttribute(\"target\").toString().substr(1);\n\t\t\t\t\t\t//matname = matname.replace(/ /g,\"_\"); //names cannot have spaces\n\t\t\t\t\t\tif(!scene.materials[ matname ])\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tvar material = this.readMaterial(matname);\n\t\t\t\t\t\t\tif(material)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmaterial.id = matname; \n\t\t\t\t\t\t\t\tscene.materials[ material.id ] = material;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(iMat == 0)\n\t\t\t\t\t\t\tnode.material = matname;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!node.materials)\n\t\t\t\t\t\t\t\tnode.materials = [];\n\t\t\t\t\t\t\tnode.materials.push(matname);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\t//this node has a controller: skinning, morph targets or even multimaterial are controllers\n\t\t\t//warning: I detected that some nodes could have a controller but they are not referenced here.  ??\n\t\t\tif(xmlchild.localName == \"instance_controller\")\n\t\t\t{\n\t\t\t\tvar url = xmlchild.getAttribute(\"url\");\n\t\t\t\tvar xmlcontroller = this._xmlroot.querySelector(\"controller\" + url);\n\n\t\t\t\tif(xmlcontroller)\n\t\t\t\t{\n\n\t\t\t\t\tvar mesh_data = this.readController( xmlcontroller, flip, scene );\n\n\t\t\t\t\t//binded materials\n\t\t\t\t\tvar xmlbind_material = xmlchild.querySelector(\"bind_material\");\n\t\t\t\t\tif(xmlbind_material){\n\t\t\t\t\t\t//removed readBindMaterials up here for consistency\n\t\t\t\t\t\tvar xmltechniques = xmlbind_material.querySelectorAll(\"technique_common\");\n\t\t\t\t\t\tfor(var iTec = 0; iTec < xmltechniques.length; iTec++)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar xmltechnique = xmltechniques.item(iTec);\n\t\t\t\t\t\t\tvar xmlinstance_materials = xmltechnique.querySelectorAll(\"instance_material\");\n\t\t\t\t\t\t\tfor(var iMat = 0; iMat < xmlinstance_materials.length; iMat++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tvar xmlinstance_material = xmlinstance_materials.item(iMat);\n\t\t\t\t\t\t\t\tif(!xmlinstance_material)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconsole.warn(\"instance_material for controller not found: \" + xmlinstance_material);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvar matname = xmlinstance_material.getAttribute(\"target\").toString().substr(1);\n\t\t\t\t\t\t\t\tif(!scene.materials[ matname ])\n\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\tvar material = this.readMaterial(matname);\n\t\t\t\t\t\t\t\t\tif(material)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tmaterial.id = matname; \n\t\t\t\t\t\t\t\t\t\tscene.materials[ material.id ] = material;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif(iMat == 0)\n\t\t\t\t\t\t\t\t\tnode.material = matname;\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tif(!node.materials)\n\t\t\t\t\t\t\t\t\t\tnode.materials = [];\n\t\t\t\t\t\t\t\t\tnode.materials.push(matname);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif(mesh_data)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar mesh = mesh_data;\n\t\t\t\t\t\tif( mesh_data.type == \"morph\" )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmesh = mesh_data.mesh;\n\t\t\t\t\t\t\tnode.morph_targets = mesh_data.morph_targets;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmesh.name = url.toString();\n\t\t\t\t\t\tnode.mesh = url.toString();\n\t\t\t\t\t\tscene.meshes[ url ] = mesh;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//light\n\t\t\tif(xmlchild.localName == \"instance_light\")\n\t\t\t{\n\t\t\t\tvar url = xmlchild.getAttribute(\"url\");\n\t\t\t\tthis.readLight(node, url);\n\t\t\t}\n\n\t\t\t//camera\n\t\t\tif(xmlchild.localName == \"instance_camera\")\n\t\t\t{\n\t\t\t\tvar url = xmlchild.getAttribute(\"url\");\n\t\t\t\tthis.readCamera(node, url);\n\t\t\t}\n\n\t\t\t//other possible tags?\n\t\t}\n\t},\n\n\t//if you want to rename some material names\n\tmaterial_translate_table: {\n\t\t/*\n\t\ttransparency: \"opacity\",\n\t\treflectivity: \"reflection_factor\",\n\t\tspecular: \"specular_factor\",\n\t\tshininess: \"specular_gloss\",\n\t\temission: \"emissive\",\n\t\tdiffuse: \"color\"\n\t\t*/\n\t},\n\n\tlight_translate_table: {\n\n\t\tpoint: \"omni\",\n\t\tdirectional: \"directional\",\n\t\tspot: \"spot\"\t\t\n\t},\n\n\tcamera_translate_table: {\n\t\txfov: \"fov\",\n\t\taspect_ratio: \"aspect\",\n\t\tznear: \"near\",\n\t\tzfar: \"far\"\n\t},\n\n\t//used when id have spaces (regular selector do not support spaces)\n\tquerySelectorAndId: function(root, selector, id)\n\t{\n\t\tvar nodes = root.querySelectorAll(selector);\n\t\tfor(var i = 0; i < nodes.length; i++)\n\t\t{\n\t\t\tvar attr_id = nodes.item(i).getAttribute(\"id\");\n\t\t\tif( !attr_id ) \n\t\t\t\tcontinue;\n\t\t\tattr_id = attr_id.toString();\n\t\t\tif(attr_id == id )\n\t\t\t\treturn nodes.item(i);\n\t\t}\n\t\treturn null;\n\t},\n\n\t//returns the first element that matches a tag name, if not tagname is specified then the first tag element\n\tgetFirstChildElement: function(root, localName)\n\t{\n\t\tvar c = root.childNodes;\n\t\tfor(var i = 0; i < c.length; ++i)\n\t\t{\n\t\t\tvar item = c.item(i);\n\t\t\tif( (item.localName && !localName) || (localName && localName == item.localName) )\n\t\t\t\treturn item;\n\t\t}\n\t\treturn null;\n\t},\n\n\treadMaterial: function(url)\n\t{\n\t\tvar xmlmaterial = this.querySelectorAndId( this._xmlroot, \"library_materials material\", url );\n\n\t\tif(!xmlmaterial)\n\t\t\treturn null;\n\n\t\t//get effect name\n\t\tvar xmleffect = xmlmaterial.querySelector(\"instance_effect\");\n\t\tif(!xmleffect) return null;\n\n\t\tvar effect_url = xmleffect.getAttribute(\"url\").substr(1);\n\n\t\t//get effect\n\t\tvar xmleffects = this.querySelectorAndId( this._xmlroot, \"library_effects effect\", effect_url );\n\n\t\tif(!xmleffects) return null;\n\n\t\t//get common\n\t\tvar xmltechnique = xmleffects.querySelector(\"technique\");\n\t\tif(!xmltechnique) \n\t\t\treturn null;\n\n\t\t//get newparams and convert to js object\n\t\tvar xmlnewparams = xmleffects.querySelectorAll(\"newparam\");\n\t\tvar newparams = {}\n\t\tfor (var i = 0; i < xmlnewparams.length; i++) {\n\n\t\t\tvar init_from = xmlnewparams[i].querySelector(\"init_from\");\n\t\t\tvar parent;\n\t\t\tif (init_from)\n\t\t\t\tparent = init_from.innerHTML;\n\t\t\telse {\n\t\t\t\tvar source = xmlnewparams[i].querySelector(\"source\");\n\t\t\t\tparent = source.innerHTML;\n\t\t\t}\n\n\t\t\tnewparams[xmlnewparams[i].getAttribute(\"sid\")] = {\n\t\t\t\tparent: parent\n\t\t\t};\n\t\t}\n\n\n\n\t\tvar material = {};\n\n\t\t//read the images here because we need to access them to assign texture names\n\t\tvar images = this.readImages(this._xmlroot);\n\n\n\t\tvar xmlphong = xmltechnique.querySelector(\"phong\");\n\t\tif(!xmlphong) \n\t\t\txmlphong = xmltechnique.querySelector(\"blinn\");\n\t\tif(!xmlphong) \n\t\t\txmlphong = xmltechnique.querySelector(\"lambert\");\n\t\tif(!xmlphong) \n\t\t\treturn null;\n\n\t\t//for every tag of properties\n\t\tfor(var i = 0; i < xmlphong.childNodes.length; ++i)\n\t\t{\n\t\t\tvar xmlparam = xmlphong.childNodes.item(i);\n\n\t\t\tif(!xmlparam.localName) //text tag\n\t\t\t\tcontinue;\n\n\t\t\t//translate name\n\t\t\tvar param_name = xmlparam.localName.toString();\n\t\t\tif(this.material_translate_table[param_name])\n\t\t\t\tparam_name = this.material_translate_table[param_name];\n\n\t\t\t//value\n\t\t\tvar xmlparam_value = this.getFirstChildElement( xmlparam );\n\t\t\tif(!xmlparam_value)\n\t\t\t\tcontinue;\n\n\t\t\tif(xmlparam_value.localName.toString() == \"color\")\n\t\t\t{\n\t\t\t\tvar value = this.readContentAsFloats( xmlparam_value );\n\t\t\t\tif( xmlparam.getAttribute(\"opaque\") == \"RGB_ZERO\")\n\t\t\t\t\tmaterial[ param_name ] = value.subarray(0,4);\n\t\t\t\telse\n\t\t\t\t\tmaterial[ param_name ] = value.subarray(0,3);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(xmlparam_value.localName.toString() == \"float\")\n\t\t\t{\n\t\t\t\tmaterial[ param_name ] = this.readContentAsFloats( xmlparam_value )[0];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\telse if(xmlparam_value.localName.toString() == \"texture\")\n\t\t\t{\n\t\t\t\tif(!material.textures)\n\t\t\t\t\tmaterial.textures = {};\n\t\t\t\tvar map_id = xmlparam_value.getAttribute(\"texture\");\n\t\t\t\tif(!map_id)\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// if map_id is not a filename, lets go and look for it.\n\t\t\t\tif (map_id.indexOf('.') === -1){\n\t\t\t\t\t//check effect parents\n\t\t\t\t\tmap_id = this.getParentParam(newparams, map_id);\n\n\t\t\t\t\tif (images[map_id])\n\t\t\t\t\t\tmap_id = images[map_id].path;\n\t\t\t\t}\n\n\t\t\t\t//now get the texture filename from images\n\n\t\t\t\tvar map_info = { map_id: map_id };\n\t\t\t\tvar uvs = xmlparam_value.getAttribute(\"texcoord\");\n\t\t\t\tmap_info.uvs = uvs;\n\t\t\t\tmaterial.textures[ param_name ] = map_info;\n\t\t\t}\n\t\t}\n\n\t\tmaterial.object_type = \"Material\";\n\t\treturn material;\n\t},\n\n\tgetParentParam: function(newparams, param) {\n\t\tif (!newparams[param])\n\t\t\treturn param;\n\n\t\tif (newparams[param].parent)\n\t\t\treturn this.getParentParam(newparams, newparams[param].parent)\n\t\telse\n\t\t\treturn param;\n\t},\n\n\treadLight: function(node, url)\n\t{\n\t\tvar light = {};\n\n\t\tvar xmlnode = null;\n\t\t\n\t\tif(url.length > 1) //weird cases with id == #\n\t\t\txmlnode = this._xmlroot.querySelector(\"library_lights \" + url);\n\t\telse\n\t\t{\n\t\t\tvar xmlliblights = this._xmlroot.querySelector(\"library_lights\");\n\t\t\txmlnode = this.getFirstChildElement( xmlliblights, \"light\" );\n\t\t}\n\n\t\tif(!xmlnode)\n\t\t\treturn null;\n\n\t\t//pack\n\t\tvar children = [];\n\t\tvar xml = xmlnode.querySelector(\"technique_common\");\n\t\tif(xml)\n\t\t\tfor(var i = 0; i < xml.childNodes.length; i++ )\n\t\t\t\tif( xml.childNodes.item(i).nodeType == 1 ) //tag\n\t\t\t\t\tchildren.push( xml.childNodes.item(i) );\n\n\t\tvar xmls = xmlnode.querySelectorAll(\"technique\");\n\t\tfor(var i = 0; i < xmls.length; i++)\n\t\t{\n\t\t\tvar xml2 = xmls.item(i);\n\t\t\tfor(var j = 0; j < xml2.childNodes.length; j++ )\n\t\t\t\tif( xml2.childNodes.item(j).nodeType == 1 ) //tag\n\t\t\t\t\tchildren.push( xml2.childNodes.item(j) );\n\t\t}\n\n\t\t//get\n\t\tfor(var i = 0; i < children.length; i++)\n\t\t{\n\t\t\tvar xml = children[i];\n\t\t\tswitch( xml.localName )\n\t\t\t{\n\t\t\t\tcase \"point\": \n\t\t\t\t\tlight.type = this.light_translate_table[ xml.localName ]; \n\t\t\t\t\tparse_params(light, xml);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"directional\":\n\t\t\t\t\tlight.type = this.light_translate_table[ xml.localName ]; \n\t\t\t\t\tparse_params(light, xml);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"spot\": \n\t\t\t\t\tlight.type = this.light_translate_table[ xml.localName ]; \n\t\t\t\t\tparse_params(light, xml);\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase \"intensity\": \n\t\t\t\t\tlight.intensity = this.readContentAsFloats( xml )[0]; \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfunction parse_params(light, xml)\n\t\t{\n\t\t\tfor(var i = 0; i < xml.childNodes.length; i++)\n\t\t\t{\n\t\t\t\tvar child = xml.childNodes.item(i);\n\t\t\t\tif( !child || child.nodeType != 1 ) //tag\n\t\t\t\t\tcontinue;\n\n\t\t\t\tswitch( child.localName )\n\t\t\t\t{\n\t\t\t\t\tcase \"color\": \n\t\t\t\t\t\tlight.color = Collada.readContentAsFloats( child ); break;\n\t\t\t\t\tcase \"falloff_angle\": \n\t\t\t\t\t\tlight.angle_end = Collada.readContentAsFloats( child )[0]; \n\t\t\t\t\t\tlight.angle = light.angle_end - 10; \n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t\n\t\tif(node.model)\n\t\t{\n\t\t\t//light position is final column of model\n\t\t\tlight.position = [node.model[12],node.model[13],node.model[14]];\n\t\t\t//light forward vector is reverse of third column of model\n\t\t\tvar forward = [ - node.model[8], - node.model[9], - node.model[10]];\n\t\t\t//so light target is position + forward\n\t\t\tlight.target = [light.position[0] + forward[0],\n\t\t\t\t\t\t\tlight.position[1] + forward[1],\n\t\t\t\t\t\t\tlight.position[2] + forward[2] ];\n\t\t}\n\t\telse {\n\t\t\tconsole.warn( \"Could not read light position for light: \" + node.name + \". Setting defaults.\");\n\t\t\tlight.position = [0,0,0];\n\t\t\tlight.target = [0,-1,0];\n\t\t}\n\t\t\n\n\t\tnode.light = light;\n\t},\n\n\treadCamera: function(node, url)\n\t{\n\t\tvar camera = {};\n\n\t\tvar xmlnode = this._xmlroot.querySelector(\"library_cameras \" + url);\n\t\tif(!xmlnode) return null;\n\n\t\t//pack\n\t\tvar children = [];\n\t\tvar xml = xmlnode.querySelector(\"technique_common\");\n\t\tif(xml) //grab all internal stuff\n\t\t\tfor(var i = 0; i < xml.childNodes.length; i++ )\n\t\t\t\tif( xml.childNodes.item(i).nodeType == 1 ) //tag\n\t\t\t\t\tchildren.push( xml.childNodes.item(i) );\n\n\t\t//\n\t\tfor(var i = 0; i < children.length; i++)\n\t\t{\n\t\t\tvar tag = children[i];\n\t\t\tparse_params(camera, tag);\n\t\t}\n\n\t\tfunction parse_params(camera, xml)\n\t\t{\n\t\t\tfor(var i = 0; i < xml.childNodes.length; i++)\n\t\t\t{\n\t\t\t\tvar child = xml.childNodes.item(i);\n\t\t\t\tif( !child || child.nodeType != 1 ) //tag\n\t\t\t\t\tcontinue;\n\t\t\t\tvar translated = Collada.camera_translate_table[ child.localName ] || child.localName;\n\t\t\t\tcamera[ translated ] = parseFloat( child.textContent );\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\t//parse to convert yfov to standard (x) fov\n\t\tif ( camera.yfov && !camera.fov ) {\n\t\t\tif ( camera.aspect ) {\n\t\t\t\tcamera.fov = camera.yfov * camera.aspect;\n\t\t\t}\n\t\t\telse\n\t\t\t\tconsole.warn(\"Could not convert camera yfov to xfov because aspect ratio not set\")\n\t\t} \n\n\t\tnode.camera = camera;\n\t},\n\n\treadTransform: function(xmlnode, level, flip)\n\t{\n\t\t//identity\n\t\tvar matrix = mat4.create(); \n\t\tvar temp = mat4.create(); \n\t\tvar tmpq = quat.create();\n\t\t\n\t\tvar flip_fix = false;\n\n\t\t//search for the matrix\n\t\tfor(var i = 0; i < xmlnode.childNodes.length; i++)\n\t\t{\n\t\t\tvar xml = xmlnode.childNodes.item(i);\n\t\t\tif( !xml || xml.nodeType != 1 ) //tag\n\t\t\t\tcontinue;\n\n\t\t\tif(xml.localName == \"matrix\")\n\t\t\t{\n\t\t\t\tvar matrix = this.readContentAsFloats(xml);\n\t\t\t\t//console.log(\"Nodename: \" + xmlnode.getAttribute(\"id\"));\n\t\t\t\t//console.log(matrix);\n\t\t\t\tthis.transformMatrix(matrix, level == 0);\n\t\t\t\t//console.log(matrix);\n\t\t\t\treturn matrix;\n\t\t\t}\n\n\t\t\tif(xml.localName == \"translate\")\n\t\t\t{\n\t\t\t\tvar values = this.readContentAsFloats(xml);\n\t\t\t\tif(flip && level > 0)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = values[1];\n\t\t\t\t\tvalues[1] = values[2];\n\t\t\t\t\tvalues[2] = -tmp; //swap coords\n\t\t\t\t}\n\n\t\t\t\tmat4.translate( matrix, matrix, values );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//rotate\n\t\t\tif(xml.localName == \"rotate\")\n\t\t\t{\n\t\t\t\tvar values = this.readContentAsFloats(xml);\n\t\t\t\tif(values.length == 4) //x,y,z, angle\n\t\t\t\t{\n\t\t\t\t\tvar id = xml.getAttribute(\"sid\");\n\t\t\t\t\tif(id == \"jointOrientX\")\n\t\t\t\t\t{\n\t\t\t\t\t\tvalues[3] += 90;\n\t\t\t\t\t\tflip_fix = true;\n\t\t\t\t\t}\n\t\t\t\t\t//rotateX & rotateY & rotateZ done below\n\n\t\t\t\t\tif(flip)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = values[1];\n\t\t\t\t\t\tvalues[1] = values[2];\n\t\t\t\t\t\tvalues[2] = -tmp; //swap coords\n\t\t\t\t\t}\n\n\t\t\t\t\tif(values[3] != 0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tquat.setAxisAngle( tmpq, values.subarray(0,3), values[3] * DEG2RAD);\n\t\t\t\t\t\tmat4.fromQuat( temp, tmpq );\n\t\t\t\t\t\tmat4.multiply(matrix, matrix, temp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//scale\n\t\t\tif(xml.localName == \"scale\")\n\t\t\t{\n\t\t\t\tvar values = this.readContentAsFloats(xml);\n\t\t\t\tif(flip)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = values[1];\n\t\t\t\t\tvalues[1] = values[2];\n\t\t\t\t\tvalues[2] = -tmp; //swap coords\n\t\t\t\t}\n\t\t\t\tmat4.scale( matrix, matrix, values );\n\t\t\t}\n\t\t}\n\n\t\treturn matrix;\n\t},\n\n\treadTransform2: function(xmlnode, level, flip)\n\t{\n\t\t//identity\n\t\tvar matrix = mat4.create(); \n\t\tvar rotation = quat.create();\n\t\tvar tmpmatrix = mat4.create();\n\t\tvar tmpq = quat.create();\n\t\tvar translate = vec3.create();\n\t\tvar scale = vec3.fromValues(1,1,1);\n\t\t\n\t\tvar flip_fix = false;\n\n\t\t//search for the matrix\n\t\tfor(var i = 0; i < xmlnode.childNodes.length; i++)\n\t\t{\n\t\t\tvar xml = xmlnode.childNodes.item(i);\n\n\t\t\tif(xml.localName == \"matrix\")\n\t\t\t{\n\t\t\t\tvar matrix = this.readContentAsFloats(xml);\n\t\t\t\t//console.log(\"Nodename: \" + xmlnode.getAttribute(\"id\"));\n\t\t\t\t//console.log(matrix);\n\t\t\t\tthis.transformMatrix(matrix, level == 0);\n\t\t\t\t//console.log(matrix);\n\t\t\t\treturn matrix;\n\t\t\t}\n\n\t\t\tif(xml.localName == \"translate\")\n\t\t\t{\n\t\t\t\tvar values = this.readContentAsFloats(xml);\n\t\t\t\ttranslate.set(values);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//rotate\n\t\t\tif(xml.localName == \"rotate\")\n\t\t\t{\n\t\t\t\tvar values = this.readContentAsFloats(xml);\n\t\t\t\tif(values.length == 4) //x,y,z, angle\n\t\t\t\t{\n\t\t\t\t\tvar id = xml.getAttribute(\"sid\");\n\t\t\t\t\tif(id == \"jointOrientX\")\n\t\t\t\t\t{\n\t\t\t\t\t\tvalues[3] += 90;\n\t\t\t\t\t\tflip_fix = true;\n\t\t\t\t\t}\n\t\t\t\t\t//rotateX & rotateY & rotateZ done below\n\n\t\t\t\t\tif(flip)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = values[1];\n\t\t\t\t\t\tvalues[1] = values[2];\n\t\t\t\t\t\tvalues[2] = -tmp; //swap coords\n\t\t\t\t\t}\n\n\t\t\t\t\tif(values[3] != 0.0)\n\t\t\t\t\t{\n\t\t\t\t\t\tquat.setAxisAngle( tmpq, values.subarray(0,3), values[3] * DEG2RAD);\n\t\t\t\t\t\tquat.multiply(rotation,rotation,tmpq);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//scale\n\t\t\tif(xml.localName == \"scale\")\n\t\t\t{\n\t\t\t\tvar values = this.readContentAsFloats(xml);\n\t\t\t\tif(flip)\n\t\t\t\t{\n\t\t\t\t\tvar tmp = values[1];\n\t\t\t\t\tvalues[1] = values[2];\n\t\t\t\t\tvalues[2] = -tmp; //swap coords\n\t\t\t\t}\n\t\t\t\tscale.set(values);\n\t\t\t}\n\t\t}\n\n\t\tif(flip && level > 0)\n\t\t{\n\t\t\tvar tmp = translate[1];\n\t\t\ttranslate[1] = translate[2];\n\t\t\ttranslate[2] = -tmp; //swap coords\n\t\t}\n\t\tmat4.translate(matrix, matrix, translate);\n\n\t\tmat4.fromQuat( tmpmatrix , rotation );\n\t\t//mat4.rotateX(tmpmatrix, tmpmatrix, Math.PI * 0.5);\n\t\tmat4.multiply( matrix, matrix, tmpmatrix );\n\t\tmat4.scale( matrix, matrix, scale );\n\n\n\t\treturn matrix;\n\t},\n\n\t//for help read this: https://www.khronos.org/collada/wiki/Using_accessors\n\treadGeometry: function(id, flip, scene)\n\t{\n\t\t//already read, could happend if several controllers point to the same mesh\n\t\tif( this._geometries_found[ id ] !== undefined )\n\t\t\treturn this._geometries_found[ id ];\n\n\t\t//var xmlgeometry = this._xmlroot.querySelector(\"geometry\" + id);\n\t\tvar xmlgeometry = this._xmlroot.getElementById(id.substr(1));\n\t\tif(!xmlgeometry) \n\t\t{\n\t\t\tconsole.warn(\"readGeometry: geometry not found: \" + id);\n\t\t\tthis._geometries_found[ id ] = null;\n\t\t\treturn null;\n\t\t}\n\n\t\t//if the geometry has morph targets then instead of storing it in a geometry, it is in a controller\n\t\tif(xmlgeometry.localName == \"controller\") \n\t\t{\n\t\t\tvar geometry = this.readController( xmlgeometry, flip, scene );\n\t\t\tthis._geometries_found[ id ] = geometry;\n\t\t\treturn geometry;\n\t\t}\n\n\n\t\tif(xmlgeometry.localName != \"geometry\") \n\t\t{\n\t\t\tconsole.warn(\"readGeometry: tag should be geometry, instead it was found: \" + xmlgeometry.localName);\n\t\t\tthis._geometries_found[ id ] = null;\n\t\t\treturn null;\n\t\t}\n\n\t\tvar xmlmesh = xmlgeometry.querySelector(\"mesh\");\n\t\tif(!xmlmesh)\n\t\t{\n\t\t\tconsole.warn(\"readGeometry: mesh not found in geometry: \" + id);\n\t\t\tthis._geometries_found[ id ] = null;\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t//get data sources\n\t\tvar sources = {};\n\t\tvar xmlsources = xmlmesh.querySelectorAll(\"source\");\n\t\tfor(var i = 0; i < xmlsources.length; i++)\n\t\t{\n\t\t\tvar xmlsource = xmlsources.item(i);\n\t\t\tif(!xmlsource.querySelector) continue;\n\t\t\tvar float_array = xmlsource.querySelector(\"float_array\");\n\t\t\tif(!float_array)\n\t\t\t\tcontinue;\n\t\t\tvar floats = this.readContentAsFloats( float_array );\n\n\t\t\tvar xmlaccessor = xmlsource.querySelector(\"accessor\");\n\t\t\tvar stride = parseInt( xmlaccessor.getAttribute(\"stride\") );\n\n\t\t\tsources[ xmlsource.getAttribute(\"id\") ] = {stride: stride, data: floats};\n\t\t}\n\n\t\t//get streams\n\t\tvar xmlvertices = xmlmesh.querySelector(\"vertices input\");\n\t\tvar vertices_source = sources[ xmlvertices.getAttribute(\"source\").substr(1) ];\n\t\tsources[ xmlmesh.querySelector(\"vertices\").getAttribute(\"id\") ] = vertices_source;\n\n\t\tvar mesh = null;\n\t\tvar xmlpolygons = xmlmesh.querySelector(\"polygons\");\n\t\tif( xmlpolygons )\n\t\t\tmesh = this.readTriangles( xmlpolygons, sources );\n\n\t\tif(!mesh)\n\t\t{\n\t\t\tvar xmltriangles = xmlmesh.querySelectorAll(\"triangles\");\n\t\t\tif(xmltriangles && xmltriangles.length)\n\t\t\t\tmesh = this.readTriangles( xmltriangles, sources );\n\t\t}\n\n\t\tif(!mesh)\n\t\t{\n\t\t\t//polylist = true;\n\t\t\t//var vcount = null;\n\t\t\t//var xmlvcount = xmlpolygons.querySelector(\"vcount\");\n\t\t\t//var vcount = this.readContentAsUInt32( xmlvcount );\n\t\t\tvar xmlpolylist = xmlmesh.querySelector(\"polylist\");\n\t\t\tif(xmlpolylist)\n\t\t\t\tmesh = this.readPolylist( xmlpolylist, sources );\n\t\t}\n\n\n\t\tif(!mesh)\n\t\t{\n\t\t\tvar xmllinestrip = xmlmesh.querySelector(\"linestrips\");\n\t\t\tif(xmllinestrip)\n\t\t\t\tmesh = this.readLineStrip( sources, xmllinestrip );\n\t\t}\n\n\t\tif(!mesh)\n\t\t{\n\t\t\tconsole.log(\"no polygons or triangles in mesh: \" + id);\n\t\t\tthis._geometries_found[ id ] = null;\n\t\t\treturn null;\n\t\t}\n\t\n\t\t//swap coords (X,Y,Z) -> (X,Z,-Y)\n\t\tif(flip && !this.no_flip)\n\t\t{\n\t\t\tvar tmp = 0;\n\t\t\tvar array = mesh.vertices;\n\t\t\tfor(var i = 0, l = array.length; i < l; i += 3)\n\t\t\t{\n\t\t\t\ttmp = array[i+1]; \n\t\t\t\tarray[i+1] = array[i+2];\n\t\t\t\tarray[i+2] = -tmp; \n\t\t\t}\n\n\t\t\tarray = mesh.normals;\n\t\t\tfor(var i = 0, l = array.length; i < l; i += 3)\n\t\t\t{\n\t\t\t\ttmp = array[i+1]; \n\t\t\t\tarray[i+1] = array[i+2];\n\t\t\t\tarray[i+2] = -tmp; \n\t\t\t}\n\t\t}\n\n\t\t//transferables for worker\n\t\tif(isWorker && this.use_transferables)\n\t\t{\n\t\t\tfor(var i in mesh)\n\t\t\t{\n\t\t\t\tvar data = mesh[i];\n\t\t\t\tif(data && data.buffer && data.length > 100)\n\t\t\t\t{\n\t\t\t\t\tthis._transferables.push(data.buffer);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//extra info\n\t\tmesh.filename = id;\n\t\tmesh.object_type = \"Mesh\";\n\n\t\tthis._geometries_found[ id ] = mesh;\n\t\treturn mesh;\n\t},\n\n\treadTriangles: function( xmltriangles, sources )\n\t{\n\t\tvar use_indices = false;\n\n\t\tvar groups = [];\n\t\tvar buffers = [];\n\t\tvar last_index = 0;\n\t\tvar facemap = {};\n\t\tvar vertex_remap = []; //maps DAE vertex index to Mesh vertex index (because when meshes are triangulated indices are changed\n\t\tvar indicesArray = [];\n\t\tvar last_start = 0;\n\t\tvar group_name = \"\";\n\t\tvar material_name = \"\";\n\n\t\t//for every triangles set (warning, some times they are repeated...)\n\t\tfor(var tris = 0; tris < xmltriangles.length; tris++)\n\t\t{\n\t\t\tvar xml_shape_root = xmltriangles.item(tris);\n\t\t\tvar triangles = xml_shape_root.localName == \"triangles\";\n\n\t\t\tmaterial_name = xml_shape_root.getAttribute(\"material\");\n\n\t\t\t//for each buffer (input) build the structure info\n\t\t\tif(tris == 0)\n\t\t\t\tbuffers = this.readShapeInputs( xml_shape_root, sources );\n\n\t\t\t//assuming buffers are ordered by offset\n\n\t\t\t//iterate data\n\t\t\tvar xmlps = xml_shape_root.querySelectorAll(\"p\");\n\t\t\tvar num_data_vertex = buffers.length; //one value per input buffer\n\n\t\t\t//for every polygon (could be one with all the indices, could be several, depends on the program)\n\t\t\tfor(var i = 0; i < xmlps.length; i++)\n\t\t\t{\n\t\t\t\tvar xmlp = xmlps.item(i);\n\t\t\t\tif(!xmlp || !xmlp.textContent) \n\t\t\t\t\tbreak;\n\n\t\t\t\tvar data = xmlp.textContent.trim().split(\" \");\n\n\t\t\t\t//used for triangulate polys\n\t\t\t\tvar first_index = -1;\n\t\t\t\tvar current_index = -1;\n\t\t\t\tvar prev_index = -1;\n\n\t\t\t\t//discomment to force 16bits indices\n\t\t\t\t//if(use_indices && last_index >= 256*256)\n\t\t\t\t//\tbreak;\n\n\t\t\t\tvar num_values_per_vertex = 1;\n\t\t\t\tfor(var b in buffers)\n\t\t\t\t\tnum_values_per_vertex = Math.max( num_values_per_vertex, buffers[b][4] + 1);\n\n\t\t\t\t//for every pack of indices in the polygon (vertex, normal, uv, ... )\n\t\t\t\tvar current_data_pos = 0;\n\t\t\t\tfor(var k = 0, l = data.length; k < l; k += num_values_per_vertex)\n\t\t\t\t{\n\t\t\t\t\tvar vertex_id = data.slice(k,k+num_values_per_vertex).join(\" \"); //generate unique id\n\n\t\t\t\t\tprev_index = current_index;\n\t\t\t\t\tif(facemap.hasOwnProperty(vertex_id)) //add to arrays, keep the index\n\t\t\t\t\t\tcurrent_index = facemap[vertex_id];\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t//for every data buffer associated to this vertex\n\t\t\t\t\t\tfor(var j = 0; j < buffers.length; ++j)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar buffer = buffers[j];\n\t\t\t\t\t\t\tvar array = buffer[1]; //array where we accumulate the final data as we extract if from sources\n\t\t\t\t\t\t\tvar source = buffer[3]; //where to read the data from\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//compute the index inside the data source array\n\t\t\t\t\t\t\t//var index = parseInt(data[k + j]);\n\t\t\t\t\t\t\tvar index = parseInt( data[ k + buffer[4] ] );\n\t\t\t\t\t\t\t//current_data_pos += buffer[4];\n\n\t\t\t\t\t\t\t//remember this index in case we need to remap\n\t\t\t\t\t\t\tif(j == 0)\n\t\t\t\t\t\t\t\tvertex_remap[ array.length / buffer[2] ] = index; //not sure if buffer[2], it should be number of floats per vertex (usually 3)\n\t\t\t\t\t\t\t\t//vertex_remap[ array.length / num_data_vertex ] = index;\n\n\t\t\t\t\t\t\t//compute the position inside the source buffer where the final data is located\n\t\t\t\t\t\t\tindex *= buffer[2]; //this works in most DAEs (not all)\n\t\t\t\t\t\t\t//index = index * buffer[2] + buffer[4]; //stride(2) offset(4)\n\t\t\t\t\t\t\t//index += buffer[4]; //stride(2) offset(4)\n\t\t\t\t\t\t\t//extract every value of this element and store it in its final array (every x,y,z, etc)\n\t\t\t\t\t\t\tfor(var x = 0; x < buffer[2]; ++x)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif(source[index+x] === undefined) throw(\"UNDEFINED!\"); //DEBUG\n\t\t\t\t\t\t\t\tarray.push( source[index+x] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tcurrent_index = last_index;\n\t\t\t\t\t\tlast_index += 1;\n\t\t\t\t\t\tfacemap[vertex_id] = current_index;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(!triangles) //the xml element is not triangles? then split polygons in triangles\n\t\t\t\t\t{\n\t\t\t\t\t\tif(k == 0)\n\t\t\t\t\t\t\tfirst_index = current_index;\n\t\t\t\t\t\t//if(k > 2 * num_data_vertex) //not sure if use this or the next line, the next one works in some DAEs but not sure if it works in all\n\t\t\t\t\t\tif(k > 2) //triangulate polygons: ensure this works\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tindicesArray.push( first_index );\n\t\t\t\t\t\t\tindicesArray.push( prev_index );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tindicesArray.push( current_index );\n\t\t\t\t}//per vertex\n\t\t\t}//per polygon\n\n\t\t\tvar group = {\n\t\t\t\tname: group_name || (\"group\" + tris),\n\t\t\t\tstart: last_start,\n\t\t\t\tlength: indicesArray.length - last_start,\n\t\t\t\tmaterial: material_name || \"\"\n\t\t\t};\n\t\t\tlast_start = indicesArray.length;\n\t\t\tgroups.push( group );\n\t\t}//per triangles group\n\n\t\tvar mesh = {\n\t\t\tvertices: new Float32Array( buffers[0][1] ),\n\t\t\tinfo: { groups: groups },\n\t\t\t_remap: new Uint32Array(vertex_remap)\n\t\t};\n\n\t\tthis.transformMeshInfo( mesh, buffers, indicesArray );\n\n\t\treturn mesh;\n\t},\n\n\treadPolylist: function( xml_shape_root, sources )\n\t{\n\t\tvar use_indices = false;\n\n\t\tvar groups = [];\n\t\tvar buffers = [];\n\t\tvar last_index = 0;\n\t\tvar facemap = {};\n\t\tvar vertex_remap = [];\n\t\tvar indicesArray = [];\n\t\tvar last_start = 0;\n\t\tvar group_name = \"\";\n\t\tvar material_name = \"\";\n\n\t\tmaterial_name = xml_shape_root.getAttribute(\"material\");\n\t\tbuffers = this.readShapeInputs( xml_shape_root, sources );\n\n\t\tvar xmlvcount = xml_shape_root.querySelector(\"vcount\");\n\t\tvar vcount = this.readContentAsUInt32( xmlvcount );\n\n\t\tvar xmlp = xml_shape_root.querySelector(\"p\");\n\t\tvar data = this.readContentAsUInt32( xmlp );\n\n\t\tvar num_data_vertex = buffers.length;\n\n\t\tvar pos = 0;\n\t\tfor(var i = 0, l = vcount.length; i < l; ++i)\n\t\t{\n\t\t\tvar num_vertices = vcount[i];\n\n\t\t\tvar first_index = -1;\n\t\t\tvar current_index = -1;\n\t\t\tvar prev_index = -1;\n\n\t\t\t//iterate vertices of this polygon\n\t\t\tfor(var k = 0; k < num_vertices; ++k )\n\t\t\t{\n\t\t\t\tvar vertex_id = data.subarray(pos,pos + num_data_vertex).join(\" \");\n\n\t\t\t\tprev_index = current_index;\n\t\t\t\tif(facemap.hasOwnProperty(vertex_id)) //add to arrays, keep the index\n\t\t\t\t\tcurrent_index = facemap[vertex_id];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfor(var j = 0; j < buffers.length; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar buffer = buffers[j];\n\t\t\t\t\t\tvar index = parseInt( data[pos + j] ); //p\n\t\t\t\t\t\tvar array = buffer[1]; //array with all the data\n\t\t\t\t\t\tvar source = buffer[3]; //where to read the data from\n\t\t\t\t\t\tif(j == 0)\n\t\t\t\t\t\t\tvertex_remap[ array.length / num_data_vertex ] = index;\n\t\t\t\t\t\tindex *= buffer[2]; //stride\n\t\t\t\t\t\tfor(var x = 0; x < buffer[2]; ++x)\n\t\t\t\t\t\t\tarray.push( source[index+x] );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcurrent_index = last_index;\n\t\t\t\t\tlast_index += 1;\n\t\t\t\t\tfacemap[vertex_id] = current_index;\n\t\t\t\t}\n\n\t\t\t\tif(num_vertices > 3) //split polygons then\n\t\t\t\t{\n\t\t\t\t\tif(k == 0)\n\t\t\t\t\t\tfirst_index = current_index;\n\t\t\t\t\t//if(k > 2 * num_data_vertex) //not sure if use this or the next line, the next one works in some DAEs but not sure if it works in all\n\t\t\t\t\tif(k > 2) //triangulate polygons: tested, this works\n\t\t\t\t\t{\n\t\t\t\t\t\tindicesArray.push( first_index );\n\t\t\t\t\t\tindicesArray.push( prev_index );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tindicesArray.push( current_index );\n\t\t\t\tpos += num_data_vertex;\n\t\t\t}//per vertex\n\n\t\t}//per polygon\n\n\t\tvar mesh = {\n\t\t\tvertices: new Float32Array( buffers[0][1] ),\n\t\t\tinfo: {},\n\t\t\t_remap: new Uint32Array( vertex_remap )\n\t\t};\n\n\t\tthis.transformMeshInfo( mesh, buffers, indicesArray );\n\n\t\treturn mesh;\n\t},\n\n\treadShapeInputs: function(xml_shape_root, sources)\n\t{\n\t\tvar buffers = [];\n\n\t\tvar xmlinputs = xml_shape_root.querySelectorAll(\"input\");\n\t\tfor(var i = 0; i < xmlinputs.length; i++)\n\t\t{\n\t\t\tvar xmlinput = xmlinputs.item(i);\n\t\t\tif(!xmlinput.getAttribute) \n\t\t\t\tcontinue;\n\t\t\tvar semantic = xmlinput.getAttribute(\"semantic\").toUpperCase();\n\t\t\tvar stream_source = sources[ xmlinput.getAttribute(\"source\").substr(1) ];\n\t\t\tvar offset = parseInt( xmlinput.getAttribute(\"offset\") );\n\t\t\tvar data_set = 0;\n\t\t\tif(xmlinput.getAttribute(\"set\"))\n\t\t\t\tdata_set = parseInt( xmlinput.getAttribute(\"set\") );\n\t\t\tbuffers.push([semantic, [], stream_source.stride, stream_source.data, offset, data_set ]);\n\t\t}\n\n\t\treturn buffers;\n\t},\n\n\ttransformMeshInfo: function( mesh, buffers, indicesArray )\n\t{\n\t\t//rename buffers (DAE has other names)\n\t\tvar translator = {\n\t\t\t\"normal\":\"normals\",\n\t\t\t\"texcoord\":\"coords\"\n\t\t};\n\t\tfor(var i = 1; i < buffers.length; ++i)\n\t\t{\n\t\t\tvar name = buffers[i][0].toLowerCase();\n\t\t\tvar data = buffers[i][1];\n\t\t\tif(!data.length)\n\t\t\t\tcontinue;\n\n\t\t\tif(translator[name])\n\t\t\t\tname = translator[name];\n\t\t\tif(mesh[name])\n\t\t\t\tname = name + buffers[i][5];\n\t\t\tmesh[ name ] = new Float32Array(data); //are they always float32? I think so\n\t\t}\n\t\t\n\t\tif(indicesArray && indicesArray.length)\n\t\t{\n\t\t\tif(mesh.vertices.length > 256*256)\n\t\t\t\tmesh.triangles = new Uint32Array(indicesArray);\n\t\t\telse\n\t\t\t\tmesh.triangles = new Uint16Array(indicesArray);\n\t\t}\n\n\t\treturn mesh;\n\t},\n\n\treadLineStrip: function(sources, xmllinestrip)\n\t{\n\t\tvar use_indices = false;\n\n\t\tvar buffers = [];\n\t\tvar last_index = 0;\n\t\tvar facemap = {};\n\t\tvar vertex_remap = [];\n\t\tvar indicesArray = [];\n\t\tvar last_start = 0;\n\t\tvar group_name = \"\";\n\t\tvar material_name = \"\";\n\n\t\tvar tris = 0; //used in case there are several strips\n\n\t\t//for each buffer (input) build the structure info\n\t\tvar xmlinputs = xmllinestrip.querySelectorAll(\"input\");\n\t\tif(tris == 0) //first iteration, create buffers\n\t\t\tfor(var i = 0; i < xmlinputs.length; i++)\n\t\t\t{\n\t\t\t\tvar xmlinput = xmlinputs.item(i);\n\t\t\t\tif(!xmlinput.getAttribute) \n\t\t\t\t\tcontinue;\n\t\t\t\tvar semantic = xmlinput.getAttribute(\"semantic\").toUpperCase();\n\t\t\t\tvar stream_source = sources[ xmlinput.getAttribute(\"source\").substr(1) ];\n\t\t\t\tvar offset = parseInt( xmlinput.getAttribute(\"offset\") );\n\t\t\t\tvar data_set = 0;\n\t\t\t\tif(xmlinput.getAttribute(\"set\"))\n\t\t\t\t\tdata_set = parseInt( xmlinput.getAttribute(\"set\") );\n\n\t\t\t\tbuffers.push([semantic, [], stream_source.stride, stream_source.data, offset, data_set]);\n\t\t\t}\n\t\t//assuming buffers are ordered by offset\n\n\t\t//iterate data\n\t\tvar xmlps = xmllinestrip.querySelectorAll(\"p\");\n\t\tvar num_data_vertex = buffers.length; //one value per input buffer\n\n\t\t//for every polygon (could be one with all the indices, could be several, depends on the program)\n\t\tfor(var i = 0; i < xmlps.length; i++)\n\t\t{\n\t\t\tvar xmlp = xmlps.item(i);\n\t\t\tif(!xmlp || !xmlp.textContent) \n\t\t\t\tbreak;\n\n\t\t\tvar data = xmlp.textContent.trim().split(\" \");\n\n\t\t\t//used for triangulate polys\n\t\t\tvar first_index = -1;\n\t\t\tvar current_index = -1;\n\t\t\tvar prev_index = -1;\n\n\t\t\t//if(use_indices && last_index >= 256*256)\n\t\t\t//\tbreak;\n\n\t\t\t//for every pack of indices in the polygon (vertex, normal, uv, ... )\n\t\t\tfor(var k = 0, l = data.length; k < l; k += num_data_vertex)\n\t\t\t{\n\t\t\t\tvar vertex_id = data.slice(k,k+num_data_vertex).join(\" \"); //generate unique id\n\n\t\t\t\tprev_index = current_index;\n\t\t\t\tif(facemap.hasOwnProperty(vertex_id)) //add to arrays, keep the index\n\t\t\t\t\tcurrent_index = facemap[vertex_id];\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tfor(var j = 0; j < buffers.length; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar buffer = buffers[j];\n\t\t\t\t\t\tvar index = parseInt(data[k + j]);\n\t\t\t\t\t\tvar array = buffer[1]; //array with all the data\n\t\t\t\t\t\tvar source = buffer[3]; //where to read the data from\n\t\t\t\t\t\tif(j == 0)\n\t\t\t\t\t\t\tvertex_remap[ array.length / num_data_vertex ] = index;\n\t\t\t\t\t\tindex *= buffer[2]; //stride\n\t\t\t\t\t\tfor(var x = 0; x < buffer[2]; ++x)\n\t\t\t\t\t\t\tarray.push( source[index+x] );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tcurrent_index = last_index;\n\t\t\t\t\tlast_index += 1;\n\t\t\t\t\tfacemap[vertex_id] = current_index;\n\t\t\t\t}\n\n\t\t\t\tindicesArray.push( current_index );\n\t\t\t}//per vertex\n\t\t}//per polygon\n\n\t\tvar mesh = {\n\t\t\tprimitive: \"line_strip\",\n\t\t\tvertices: new Float32Array( buffers[0][1] ),\n\t\t\tinfo: {}\n\t\t};\n\n\t\treturn this.transformMeshInfo( mesh, buffers, indicesArray );\n\t},\n\n\t//like querySelector but allows spaces in names because COLLADA allows space in names\n\tfindXMLNodeById: function(root, nodename, id)\n\t{\n\t\t//precomputed\n\t\tif( this._xmlroot._nodes_by_id )\n\t\t{\n\t\t\tvar n = this._xmlroot._nodes_by_id[ id ];\n\t\t\tif( n && n.localName == nodename)\n\t\t\t\treturn n;\n\t\t}\n\t\telse //for the native parser\n\t\t{\n\t\t\tvar n = this._xmlroot.getElementById( id );\n\t\t\tif(n)\n\t\t\t\treturn n;\n\t\t}\n\n\t\t//recursive: slow\n\t\tvar childs = root.childNodes;\n\t\tfor(var i = 0; i < childs.length; ++i)\n\t\t{\n\t\t\tvar xmlnode = childs.item(i);\n\t\t\tif(xmlnode.nodeType != 1 ) //no tag\n\t\t\t\tcontinue;\n\t\t\tif(xmlnode.localName != nodename)\n\t\t\t\tcontinue;\n\t\t\tvar node_id = xmlnode.getAttribute(\"id\");\n\t\t\tif(node_id == id)\n\t\t\t\treturn xmlnode;\n\t\t}\n\t\treturn null;\n\t},\n\n\treadImages: function(root)\n\t{\n\t\tvar xmlimages = root.querySelector(\"library_images\");\n\t\tif(!xmlimages)\n\t\t\treturn null;\n\n\t\tvar images = {};\n\n\t\tvar xmlimages_childs = xmlimages.childNodes;\n\t\tfor(var i = 0; i < xmlimages_childs.length; ++i)\n\t\t{\n\t\t\tvar xmlimage = xmlimages_childs.item(i);\n\t\t\tif(xmlimage.nodeType != 1 ) //no tag\n\t\t\t\tcontinue;\n\n\t\t\tvar xmlinitfrom = xmlimage.querySelector(\"init_from\");\n\t\t\tif(!xmlinitfrom)\n\t\t\t\tcontinue;\n\t\t\tif(xmlinitfrom.textContent)\n\t\t\t{\n\t\t\t\tvar filename = this.getFilename( xmlinitfrom.textContent );\n\t\t\t\tvar id = xmlimage.getAttribute(\"id\");\n\t\t\t\timages[id] = { filename: filename, map: id, name: xmlimage.getAttribute(\"name\"), path: xmlinitfrom.textContent };\n\t\t\t}\n\t\t}\n\n\t\treturn images;\n\t},\n\n\treadAnimations: function(root, scene)\n\t{\n\t\tvar xmlanimations = root.querySelector(\"library_animations\");\n\t\tif(!xmlanimations)\n\t\t\treturn null;\n\n\t\tvar xmlanimation_childs = xmlanimations.childNodes;\n\n\t\tvar animations = {\n\t\t\tobject_type: \"Animation\",\n\t\t\ttakes: {}\n\t\t};\n\n\t\tvar default_take = { tracks: [] };\n\t\tvar tracks = default_take.tracks;\n\n\t\tfor(var i = 0; i < xmlanimation_childs.length; ++i)\n\t\t{\n\t\t\tvar xmlanimation = xmlanimation_childs.item(i);\n\t\t\tif(xmlanimation.nodeType != 1 || xmlanimation.localName != \"animation\") //no tag\n\t\t\t\tcontinue;\n\n\t\t\tvar anim_id = xmlanimation.getAttribute(\"id\");\n\t\t\tif(!anim_id) //nested animation (DAE 1.5)\n\t\t\t{\n\t\t\t\tvar xmlanimation2_childs = xmlanimation.querySelectorAll(\"animation\");\n\t\t\t\tif(xmlanimation2_childs.length)\n\t\t\t\t{\n\t\t\t\t\tfor(var j = 0; j < xmlanimation2_childs.length; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar xmlanimation2 = xmlanimation2_childs.item(j);\n\t\t\t\t\t\tthis.readAnimation( xmlanimation2, tracks );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse //source tracks?\n\t\t\t\t\tthis.readAnimation( xmlanimation, tracks );\n\t\t\t}\n\t\t\telse //no nested (DAE 1.4)\n\t\t\t\tthis.readAnimation( xmlanimation, tracks );\n\t\t}\n\n\t\tif(!tracks.length) \n\t\t\treturn null; //empty animation\n\n\t\t//compute animation duration\n\t\tvar max_time = 0;\n\t\tfor(var i = 0; i < tracks.length; ++i)\n\t\t\tif( max_time < tracks[i].duration )\n\t\t\t\tmax_time = tracks[i].duration;\n\n\t\tdefault_take.name = \"default\";\n\t\tdefault_take.duration = max_time;\n\t\tanimations.takes[ default_take.name ] = default_take;\n\t\treturn animations;\n\t},\n\n\t//animation xml\n\treadAnimation: function( xmlanimation, result )\n\t{\n\t\tif(xmlanimation.localName != \"animation\")\n\t\t\treturn null;\n\n\t\t//this could be missing when there are lots of anims packed in one <animation>\n\t\tvar anim_id = xmlanimation.getAttribute(\"id\");\n\n\t\t//channels are like animated properties\n\t\tvar xmlchannel_list = xmlanimation.querySelectorAll(\"channel\");\n\t\tif(!xmlchannel_list.length)\n\t\t\treturn null;\n\n\t\tvar tracks = result || [];\n\n\t\tfor(var i = 0; i < xmlchannel_list.length; ++i)\n\t\t{\n\t\t\tvar anim = this.readChannel( xmlchannel_list.item(i), xmlanimation );\n\t\t\tif(anim)\n\t\t\t\ttracks.push( anim );\n\t\t}\n\n\t\treturn tracks;\n\t},\n\n\treadChannel: function( xmlchannel, xmlanimation )\n\t{\n\t\tif(xmlchannel.localName != \"channel\" || xmlanimation.localName != \"animation\")\n\t\t\treturn null;\n\n\t\tvar source = xmlchannel.getAttribute(\"source\");\n\t\tvar target = xmlchannel.getAttribute(\"target\");\n\n\t\t//sampler, is in charge of the interpolation\n\t\t//var xmlsampler = xmlanimation.querySelector(\"sampler\" + source);\n\t\tvar xmlsampler = this.findXMLNodeById( xmlanimation, \"sampler\", source.substr(1) );\n\t\tif(!xmlsampler)\n\t\t{\n\t\t\tconsole.error(\"Error DAE: Sampler not found in \" + source);\n\t\t\treturn null;\n\t\t}\n\n\t\tvar inputs = {};\n\t\tvar params = {};\n\t\tvar sources = {};\n\t\tvar xmlinputs = xmlsampler.querySelectorAll(\"input\");\n\n\t\tvar time_data = null;\n\n\t\t//iterate inputs: collada separates the keyframe info in independent streams, like time, interpolation method, value )\n\t\tfor(var j = 0; j < xmlinputs.length; j++)\n\t\t{\n\t\t\tvar xmlinput = xmlinputs.item(j);\n\t\t\tvar source_name =  xmlinput.getAttribute(\"source\");\n\n\t\t\t//there are three \n\t\t\tvar semantic = xmlinput.getAttribute(\"semantic\");\n\n\t\t\t//Search for source\n\t\t\tvar xmlsource = this.findXMLNodeById( xmlanimation, \"source\", source_name.substr(1) );\n\t\t\tif(!xmlsource)\n\t\t\t\tcontinue;\n\n\t\t\tvar xmlparam = xmlsource.querySelector(\"param\");\n\t\t\tif(!xmlparam)\n\t\t\t\tcontinue;\n\n\t\t\tvar type = xmlparam.getAttribute(\"type\");\n\t\t\tinputs[ semantic ] = { source: source_name, type: type };\n\n\t\t\tvar data_array = null;\n\n\t\t\tif(type == \"float\" || type == \"float4x4\")\n\t\t\t{\n\t\t\t\tvar xmlfloatarray = xmlsource.querySelector(\"float_array\");\n\t\t\t\tvar floats = this.readContentAsFloats( xmlfloatarray );\n\t\t\t\tsources[ source_name ] = floats;\n\t\t\t\tdata_array = floats;\n\n\t\t\t}\n\t\t\telse //only floats and matrices are supported in animation\n\t\t\t\tcontinue;\n\n\t\t\tvar param_name = xmlparam.getAttribute(\"name\");\n\t\t\tif(param_name == \"TIME\")\n\t\t\t\ttime_data = data_array;\n\t\t\tif(semantic == \"OUTPUT\")\n\t\t\t\tparam_name = semantic;\n\t\t\tif(param_name)\n\t\t\t\tparams[ param_name ] = type;\n\t\t\telse\n\t\t\t\tconsole.warn(\"Collada: <param> without name attribute in <animation>\");\n\t\t}\n\n\t\tif(!time_data)\n\t\t{\n\t\t\tconsole.error(\"Error DAE: no TIME info found in <channel>: \" + xmlchannel.getAttribute(\"source\") );\n\t\t\treturn null;\n\t\t}\n\n\t\t//construct animation\n\t\tvar path = target.split(\"/\");\n\n\t\tvar anim = {};\n\t\tvar nodename = path[0]; //safeString ?\n\t\tvar node = this._nodes_by_id[ nodename ];\n\t\tvar locator = node.id + \"/\" + path[1];\n\t\t//anim.nodename = this.safeString( path[0] ); //where it goes\n\t\tanim.name = path[1];\n\t\tanim.property = locator;\n\t\tvar type = \"number\";\n\t\tvar element_size = 1;\n\t\tvar param_type = params[\"OUTPUT\"];\n\t\tswitch(param_type)\n\t\t{\n\t\t\tcase \"float\": element_size = 1; break;\n\t\t\tcase \"float3x3\": element_size = 9; type = \"mat3\"; break;\n\t\t\tcase \"float4x4\": element_size = 16; type = \"mat4\"; break;\n\t\t\tdefault: break;\n\t\t}\n\n\t\tanim.type = type;\n\t\tanim.value_size = element_size;\n\t\tanim.duration = time_data[ time_data.length - 1]; //last sample\n\n\t\tvar value_data = sources[ inputs[\"OUTPUT\"].source ];\n\t\tif(!value_data)\n\t\t\treturn null;\n\n\t\t//Pack data ****************\n\t\tvar num_samples = time_data.length;\n\t\tvar sample_size = element_size + 1;\n\t\tvar anim_data = new Float32Array( num_samples * sample_size );\n\t\t//for every sample\n\t\tfor(var j = 0; j < time_data.length; ++j)\n\t\t{\n\t\t\tanim_data[j * sample_size] = time_data[j]; //set time\n\t\t\tvar value = value_data.subarray( j * element_size, (j+1) * element_size );\n\t\t\tif(param_type == \"float4x4\")\n\t\t\t{\n\t\t\t\tthis.transformMatrix( value, node ? node._depth == 0 : 0 );\n\t\t\t\t//mat4.transpose(value, value);\n\t\t\t}\n\t\t\tanim_data.set(value, j * sample_size + 1); //set data\n\t\t}\n\n\t\tif(isWorker && this.use_transferables)\n\t\t{\n\t\t\tvar data = anim_data;\n\t\t\tif(data && data.buffer && data.length > 100)\n\t\t\t\tthis._transferables.push(data.buffer);\n\t\t}\n\n\t\tanim.data = anim_data;\n\t\treturn anim;\n\t},\n\n\tfindNode: function(root, id)\n\t{\n\t\tif(root.id == id) return root;\n\t\tif(root.children)\n\t\t\tfor(var i in root.children)\n\t\t\t{\n\t\t\t\tvar ret = this.findNode(root.children[i], id);\n\t\t\t\tif(ret) return ret;\n\t\t\t}\n\t\treturn null;\n\t},\n\n\t//reads controllers and stores them in \n\treadLibraryControllers: function( scene )\n\t{\n\t\tvar xmllibrarycontrollers = this._xmlroot.querySelector(\"library_controllers\");\n\t\tif(!xmllibrarycontrollers)\n\t\t\treturn null;\n\n\t\tvar xmllibrarycontrollers_childs = xmllibrarycontrollers.childNodes;\n\n\t\tfor(var i = 0; i < xmllibrarycontrollers_childs.length; ++i)\n\t\t{\n\t\t\tvar xmlcontroller = xmllibrarycontrollers_childs.item(i);\n\t\t\tif(xmlcontroller.nodeType != 1 || xmlcontroller.localName != \"controller\") //no tag\n\t\t\t\tcontinue;\n\t\t\tvar id = xmlcontroller.getAttribute(\"id\");\n\t\t\t//we have already processed this controller\n\t\t\tif( this._controllers_found[ id ] )\n\t\t\t\tcontinue;\n\n\t\t\t//read it (we wont use the returns, we will get it from this._controllers_found\n\t\t\tthis.readController( xmlcontroller, null, scene );\n\t\t}\n\t},\n\n\t//used for skinning and morphing\n\treadController: function( xmlcontroller, flip, scene )\n\t{\n\t\tif(!xmlcontroller.localName == \"controller\")\n\t\t{\n\t\t\tconsole.warn(\"readController: not a controller: \" + xmlcontroller.localName);\n\t\t\treturn null;\n\t\t}\n\n\t\tvar id = xmlcontroller.getAttribute(\"id\");\n\t\t//use cached\n\t\tif( this._controllers_found[ id ] )\n\t\t\treturn this._controllers_found[ id ];\n\n\t\t//AGUILA\n\t\t//TODO: does this work?\n\t\t// if (this._controllers_found[ id ])\n\t\t// \treturn this._controllers_found[ id ];\n\n\t\tvar use_indices = false;\n\t\tvar mesh = null;\n\t\tvar xmlskin = xmlcontroller.querySelector(\"skin\");\n\t\tif(xmlskin) {\n\t\t\tmesh = this.readSkinController( xmlskin, flip, scene);\n\t\t}\n\n\t\tvar xmlmorph = xmlcontroller.querySelector(\"morph\");\n\t\tif(xmlmorph)\n\t\t\tmesh = this.readMorphController( xmlmorph, flip, scene, mesh );\n\n\t\t//cache and return\n\t\tif (this._controllers_found[ id ]){\n\t\t\tid += \"_1blah\"; //??? this doesnt do anything\n\t\t}\n\t\telse\n\t\t\tthis._controllers_found[ id ] = mesh;\n\n\t\treturn mesh;\n\t},\n\n\t//read this to more info about DAE and skinning https://collada.org/mediawiki/index.php/Skinning\n\treadSkinController: function( xmlskin, flip, scene )\n\t{\n\t\t//base geometry\n\t\tvar id_geometry = xmlskin.getAttribute(\"source\");\n\n\n\t\tvar mesh = this.readGeometry( id_geometry, flip, scene );\n\t\tif(!mesh)\n\t\t\treturn null;\n\n\t\tvar sources = this.readSources(xmlskin, flip);\n\t\tif(!sources)\n\t\t\treturn null;\n\n\t\t//matrix\n\t\tvar bind_matrix = null;\n\t\tvar xmlbindmatrix = xmlskin.querySelector(\"bind_shape_matrix\");\n\t\tif(xmlbindmatrix)\n\t\t{\n\t\t\tbind_matrix = this.readContentAsFloats( xmlbindmatrix );\n\t\t\tthis.transformMatrix(bind_matrix, true, true );\t\t\t\n\t\t}\n\t\telse\n\t\t\tbind_matrix = mat4.create(); //identity\n\n\t\t//joints\n\t\tvar joints = [];\n\t\tvar xmljoints = xmlskin.querySelector(\"joints\");\n\t\tif(xmljoints)\n\t\t{\n\t\t\tvar joints_source = null; //which bones\n\t\t\tvar inv_bind_source = null; //bind matrices\n\t\t\tvar xmlinputs = xmljoints.querySelectorAll(\"input\");\n\t\t\tfor(var i = 0; i < xmlinputs.length; i++)\n\t\t\t{\n\t\t\t\tvar xmlinput = xmlinputs[i];\n\t\t\t\tvar sem = xmlinput.getAttribute(\"semantic\").toUpperCase();\n\t\t\t\tvar src = xmlinput.getAttribute(\"source\");\n\t\t\t\tvar source = sources[ src.substr(1) ];\n\t\t\t\tif(sem == \"JOINT\")\n\t\t\t\t\tjoints_source = source;\n\t\t\t\telse if(sem == \"INV_BIND_MATRIX\")\n\t\t\t\t\tinv_bind_source = source;\n\t\t\t}\n\n\t\t\t//save bone names and inv matrix\n\t\t\tif(!inv_bind_source || !joints_source)\n\t\t\t{\n\t\t\t\tconsole.error(\"Error DAE: no joints or inv_bind sources found\");\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tfor(var i in joints_source)\n\t\t\t{\n\t\t\t\t//get the inverse of the bind pose\n\t\t\t\tvar inv_mat = inv_bind_source.subarray(i*16,i*16+16);\n\t\t\t\tvar nodename = joints_source[i];\n\t\t\t\tvar node = this._nodes_by_id[ nodename ];\n\t\t\t\tif(!node)\n\t\t\t\t{\n\t\t\t\t\tconsole.warn(\"Node \" + nodename + \" not found\");\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.transformMatrix(inv_mat, node._depth == 0, true );\n\t\t\t\tjoints.push([ nodename, inv_mat ]);\n\t\t\t}\n\t\t}\n\n\t\t//weights\n\t\tvar xmlvertexweights = xmlskin.querySelector(\"vertex_weights\");\n\t\tif(xmlvertexweights)\n\t\t{\n\n\t\t\t//here we see the order \n\t\t\tvar weights_indexed_array = null;\n\t\t\tvar xmlinputs = xmlvertexweights.querySelectorAll(\"input\");\n\t\t\tfor(var i = 0; i < xmlinputs.length; i++)\n\t\t\t{\n\t\t\t\tif( xmlinputs[i].getAttribute(\"semantic\").toUpperCase() == \"WEIGHT\" )\n\t\t\t\t\tweights_indexed_array = sources[ xmlinputs.item(i).getAttribute(\"source\").substr(1) ];\n\t\t\t}\n\n\t\t\tif(!weights_indexed_array)\n\t\t\t\tthrow(\"no weights found\");\n\n\t\t\tvar xmlvcount = xmlvertexweights.querySelector(\"vcount\");\n\t\t\tvar vcount = this.readContentAsUInt32( xmlvcount );\n\n\t\t\tvar xmlv = xmlvertexweights.querySelector(\"v\");\n\t\t\tvar v = this.readContentAsUInt32( xmlv );\n\n\t\t\tvar num_vertices = mesh.vertices.length / 3; //3 components per vertex\n\t\t\tvar weights_array = new Float32Array(4 * num_vertices); //4 bones per vertex\n\t\t\tvar bone_index_array = new Uint8Array(4 * num_vertices); //4 bones per vertex\n\n\t\t\tvar pos = 0;\n\t\t\tvar remap = mesh._remap;\n\t\t\tvar max_bone = 0; //max bone affected\n\n\t\t\tfor(var i = 0, l = vcount.length; i < l; ++i)\n\t\t\t{\n\t\t\t\tvar num_bones = vcount[i]; //num bones influencing this vertex\n\n\t\t\t\t//find 4 with more influence\n\t\t\t\t//var v_tuplets = v.subarray(offset, offset + num_bones*2);\n\n\t\t\t\tvar offset = pos;\n\t\t\t\tvar b = bone_index_array.subarray(i*4, i*4 + 4);\n\t\t\t\tvar w = weights_array.subarray(i*4, i*4 + 4);\n\n\t\t\t\tvar sum = 0;\n\t\t\t\tfor(var j = 0; j < num_bones && j < 4; ++j)\n\t\t\t\t{\n\t\t\t\t\tb[j] = v[offset + j*2];\n\t\t\t\t\tif(b[j] > max_bone) max_bone = b[j];\n\n\t\t\t\t\tw[j] = weights_indexed_array[ v[offset + j*2 + 1] ];\n\t\t\t\t\tsum += w[j];\n\t\t\t\t}\n\n\t\t\t\t//normalize weights\n\t\t\t\tif(num_bones > 4 && sum < 1.0)\n\t\t\t\t{\n\t\t\t\t\tvar inv_sum = 1/sum;\n\t\t\t\t\tfor(var j = 0; j < 4; ++j)\n\t\t\t\t\t\tw[j] *= inv_sum;\n\t\t\t\t}\n\n\t\t\t\tpos += num_bones * 2;\n\t\t\t}\n\n\n\t\t\t//remap: because vertices order is now changed after parsing the mesh\n\t\t\tvar final_weights = new Float32Array(4 * num_vertices); //4 bones per vertex\n\t\t\tvar final_bone_indices = new Uint8Array(4 * num_vertices); //4 bones per vertex\n\t\t\tvar used_joints = [];\n\n\t\t\t//for every vertex in the mesh, process bone indices and weights\n\t\t\tfor(var i = 0; i < num_vertices; ++i)\n\t\t\t{\n\t\t\t\tvar p = remap[ i ] * 4;\n\t\t\t\tvar w = weights_array.subarray(p,p+4);\n\t\t\t\tvar b = bone_index_array.subarray(p,p+4);\n\n\t\t\t\t//sort by weight so relevant ones goes first\n\t\t\t\tfor(var k = 0; k < 3; ++k)\n\t\t\t\t{\n\t\t\t\t\tvar max_pos = k;\n\t\t\t\t\tvar max_value = w[k];\n\t\t\t\t\tfor(var j = k+1; j < 4; ++j)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(w[j] <= max_value)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tmax_pos = j;\n\t\t\t\t\t\tmax_value = w[j];\n\t\t\t\t\t}\n\t\t\t\t\tif(max_pos != k)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar tmp = w[k];\n\t\t\t\t\t\tw[k] = w[max_pos];\n\t\t\t\t\t\tw[max_pos] = tmp;\n\t\t\t\t\t\ttmp = b[k];\n\t\t\t\t\t\tb[k] = b[max_pos]; \n\t\t\t\t\t\tb[max_pos] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//store\n\t\t\t\tfinal_weights.set( w, i*4);\n\t\t\t\tfinal_bone_indices.set( b, i*4);\n\n\t\t\t\t//mark bones used\n\t\t\t\tif(w[0]) used_joints[b[0]] = true;\n\t\t\t\tif(w[1]) used_joints[b[1]] = true;\n\t\t\t\tif(w[2]) used_joints[b[2]] = true;\n\t\t\t\tif(w[3]) used_joints[b[3]] = true;\n\t\t\t}\n\n\t\t\tif(max_bone >= joints.length)\n\t\t\t\tconsole.warn(\"Mesh uses higher bone index than bones found\");\n\n\t\t\t//trim unused bones (collada could give you 100 bones for an object that only uses a fraction of them)\n\t\t\tif(1)\n\t\t\t{\n\t\t\t\tvar new_bones = [];\n\t\t\t\tvar bones_translation = {};\n\t\t\t\tfor(var i = 0; i < used_joints.length; ++i)\n\t\t\t\t\tif(used_joints[i])\n\t\t\t\t\t{\n\t\t\t\t\t\tbones_translation[i] = new_bones.length;\n\t\t\t\t\t\tnew_bones.push( joints[i] );\n\t\t\t\t\t}\n\n\t\t\t\t//in case there are less bones in use...\n\t\t\t\tif(new_bones.length < joints.length)\n\t\t\t\t{\n\t\t\t\t\t//remap\n\t\t\t\t\tfor(var i = 0; i < final_bone_indices.length; i++)\n\t\t\t\t\t\tfinal_bone_indices[i] = bones_translation[ final_bone_indices[i] ];\n\t\t\t\t\tjoints = new_bones;\n\t\t\t\t}\n\t\t\t\t//console.log(\"Bones: \", joints.length, \" used:\", num_used_joints );\n\t\t\t}\n\n\t\t\t//console.log(\"Bones: \", joints.length, \"Max bone: \", max_bone);\n\n\t\t\tmesh.weights = final_weights;\n\t\t\tmesh.bone_indices = final_bone_indices;\n\t\t\tmesh.bones = joints;\n\t\t\tmesh.bind_matrix = bind_matrix;\n\n\t\t\t//delete mesh[\"_remap\"];\n\t\t}\n\n\t\treturn mesh;\n\t},\n\n\t//NOT TESTED\n\treadMorphController: function(xmlmorph, flip, scene, mesh)\n\t{\n\t\tvar id_geometry = xmlmorph.getAttribute(\"source\");\n\t\tvar base_mesh = this.readGeometry( id_geometry, flip, scene );\n\t\tif(!base_mesh)\n\t\t\treturn null;\n\n\t\t//read sources with blend shapes info (which ones, and the weight)\n\t\tvar sources = this.readSources(xmlmorph, flip);\n\n\t\tvar morphs = [];\n\n\t\t//targets\n\t\tvar xmltargets = xmlmorph.querySelector(\"targets\");\n\t\tif(!xmltargets)\n\t\t\treturn null;\n\n\t\tvar xmlinputs = xmltargets.querySelectorAll(\"input\");\n\t\tvar targets = null;\n\t\tvar weights = null;\n\n\t\tfor(var i = 0; i < xmlinputs.length; i++)\n\t\t{\n\t\t\tvar xmlinput = xmlinputs.item(i);\n\t\t\tvar semantic = xmlinput.getAttribute(\"semantic\").toUpperCase();\n\t\t\tvar data = sources[ xmlinput.getAttribute(\"source\").substr(1) ];\n\t\t\tif( semantic == \"MORPH_TARGET\" )\n\t\t\t\ttargets = data;\n\t\t\telse if( semantic == \"MORPH_WEIGHT\" )\n\t\t\t\tweights = data;\n\t\t}\n\n\t\tif(!targets || !weights)\n\t\t{\n\t\t\tconsole.warn(\"Morph controller without targets or weights. Skipping it.\");\n\t\t\treturn null;\n\t\t}\n\n\t\t//get targets\n\t\tfor(var i in targets)\n\t\t{\n\t\t\tvar id = \"#\" + targets[i];\n\t\t\tvar geometry = this.readGeometry( id, flip, scene );\n\t\t\tscene.meshes[ id ] = geometry;\n\t\t\tmorphs.push( { mesh: id, weight: weights[i]} );\n\t\t}\n\n\t\tbase_mesh.morph_targets = morphs;\n\t\treturn base_mesh;\n\t},\n\n\treadBindMaterials: function( xmlbind_material, mesh )\n\t{\n\t\tvar materials = [];\n\n\t\tvar xmltechniques = xmlbind_material.querySelectorAll(\"technique_common\");\n\t\tfor(var i = 0; i < xmltechniques.length; i++)\n\t\t{\n\t\t\tvar xmltechnique = xmltechniques.item(i);\n\t\t\tvar xmlinstance_materials = xmltechnique.querySelectorAll(\"instance_material\");\n\t\t\tfor(var j = 0; j < xmlinstance_materials.length; j++)\n\t\t\t{\n\t\t\t\tvar xmlinstance_material = xmlinstance_materials.item(j);\n\t\t\t\tif(xmlinstance_material)\n\t\t\t\t\tmaterials.push( xmlinstance_material.getAttribute(\"symbol\") );\n\t\t\t}\n\t\t}\n\n\t\treturn materials;\n\t},\n\n\treadSources: function(xmlnode, flip)\n\t{\n\t\t//for data sources\n\t\tvar sources = {};\n\t\tvar xmlsources = xmlnode.querySelectorAll(\"source\");\n\t\tfor(var i = 0; i < xmlsources.length; i++)\n\t\t{\n\t\t\tvar xmlsource = xmlsources.item(i);\n\t\t\tif(!xmlsource.querySelector) //??\n\t\t\t\tcontinue;\n\n\t\t\tvar float_array = xmlsource.querySelector(\"float_array\");\n\t\t\tif(float_array)\n\t\t\t{\n\t\t\t\tvar floats = this.readContentAsFloats( xmlsource );\n\t\t\t\tsources[ xmlsource.getAttribute(\"id\") ] = floats;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar name_array = xmlsource.querySelector(\"Name_array\");\n\t\t\tif(name_array)\n\t\t\t{\n\t\t\t\tvar names = this.readContentAsStringsArray( name_array );\n\t\t\t\tif(!names)\n\t\t\t\t\tcontinue;\n\t\t\t\tsources[ xmlsource.getAttribute(\"id\") ] = names;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar ref_array = xmlsource.querySelector(\"IDREF_array\");\n\t\t\tif(ref_array)\n\t\t\t{\n\t\t\t\tvar names = this.readContentAsStringsArray( ref_array );\n\t\t\t\tif(!names)\n\t\t\t\t\tcontinue;\n\t\t\t\tsources[ xmlsource.getAttribute(\"id\") ] = names;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\treturn sources;\n\t},\n\n\treadContentAsUInt32: function(xmlnode)\n\t{\n\t\tif(!xmlnode) return null;\n\t\tvar text = xmlnode.textContent;\n\t\ttext = text.replace(/\\n/gi, \" \"); //remove line breaks\n\t\ttext = text.trim(); //remove empty spaces\n\t\tif(text.length == 0) return null;\n\t\tvar numbers = text.split(\" \"); //create array\n\t\tvar floats = new Uint32Array( numbers.length );\n\t\tfor(var k = 0; k < numbers.length; k++)\n\t\t\tfloats[k] = parseInt( numbers[k] );\n\t\treturn floats;\n\t},\n\n\treadContentAsFloats: function(xmlnode)\n\t{\n\t\tif(!xmlnode) return null;\n\t\tvar text = xmlnode.textContent;\n\t\ttext = text.replace(/\\n/gi, \" \"); //remove line breaks\n\t\ttext = text.replace(/\\s\\s+/gi, \" \");\n\t\ttext = text.replace(/\\t/gi, \"\");\n\t\ttext = text.trim(); //remove empty spaces\n\t\tvar numbers = text.split(\" \"); //create array\n\t\tvar count = xmlnode.getAttribute(\"count\");\n\t\tvar length = count ? parseInt( count  ) : numbers.length;\n\t\tvar floats = new Float32Array( length );\n\t\tfor(var k = 0; k < numbers.length; k++)\n\t\t\tfloats[k] = parseFloat( numbers[k] );\n\t\treturn floats;\n\t},\n\t\n\treadContentAsStringsArray: function(xmlnode)\n\t{\n\t\tif(!xmlnode) return null;\n\t\tvar text = xmlnode.textContent;\n\t\ttext = text.replace(/\\n/gi, \" \"); //remove line breaks\n\t\ttext = text.replace(/\\s\\s/gi, \" \");\n\t\ttext = text.trim(); //remove empty spaces\n\t\tvar words = text.split(\" \"); //create array\n\t\tfor(var k = 0; k < words.length; k++)\n\t\t\twords[k] = words[k].trim();\n\t\tif(xmlnode.getAttribute(\"count\") && parseInt(xmlnode.getAttribute(\"count\")) != words.length)\n\t\t{\n\t\t\tvar merged_words = [];\n\t\t\tvar name = \"\";\n\t\t\tfor (var i in words)\n\t\t\t{\n\t\t\t\tif(!name)\n\t\t\t\t\tname = words[i];\n\t\t\t\telse\n\t\t\t\t\tname += \" \" + words[i];\n\t\t\t\tif(!this._nodes_by_id[ this.safeString(name) ])\n\t\t\t\t\tcontinue;\n\t\t\t\tmerged_words.push( this.safeString(name) );\n\t\t\t\tname = \"\";\n\t\t\t}\n\n\t\t\tvar count = parseInt(xmlnode.getAttribute(\"count\"));\n\t\t\tif(merged_words.length == count)\n\t\t\t\treturn merged_words;\n\n\t\t\tconsole.error(\"Error: bone names have spaces, avoid using spaces in names\");\n\t\t\treturn null;\n\t\t}\n\t\treturn words;\n\t},\n\n\tmax3d_matrix_0: new Float32Array([0, -1, 0, 0, 0, 0, -1, 0, 1, 0, 0, -0, 0, 0, 0, 1]),\n\t//max3d_matrix_other: new Float32Array([0, -1, 0, 0, 0, 0, -1, 0, 1, 0, 0, -0, 0, 0, 0, 1]),\n\n\ttransformMatrix: function(matrix, first_level, inverted)\n\t{\n\t\tmat4.transpose(matrix,matrix);\n\n\t\tif(this.no_flip)\n\t\t\treturn matrix;\n\n\t\t//WARNING: DO NOT CHANGE THIS FUNCTION, THE SKY WILL FALL\n\t\tif(first_level){\n\n\t\t\t//flip row two and tree\n\t\t\tvar temp = new Float32Array(matrix.subarray(4,8)); //swap rows\n\t\t\tmatrix.set( matrix.subarray(8,12), 4 );\n\t\t\tmatrix.set( temp, 8 );\n\n\t\t\t//reverse Z\n\t\t\ttemp = matrix.subarray(8,12);\n\t\t\tvec4.scale(temp,temp,-1);\n\t\t}\n\t\telse \n\t\t{\n\t\t\tvar M = mat4.create();\n\t\t\tvar m = matrix;\n\n\t\t\t//if(inverted) mat4.invert(m,m);\n\n\t\t\t/* non trasposed\n\t\t\tM.set([m[0],m[8],-m[4]], 0);\n\t\t\tM.set([m[2],m[10],-m[6]], 4);\n\t\t\tM.set([-m[1],-m[9],m[5]], 8);\n\t\t\tM.set([m[3],m[11],-m[7]], 12);\n\t\t\t*/\n\n\t\t\tM.set([m[0],m[2],-m[1]], 0);\n\t\t\tM.set([m[8],m[10],-m[9]], 4);\n\t\t\tM.set([-m[4],-m[6],m[5]], 8);\n\t\t\tM.set([m[12],m[14],-m[13]], 12);\n\n\t\t\tm.set(M);\n\n\t\t\t//if(inverted) mat4.invert(m,m);\n\n\t\t}\n\t\treturn matrix;\n\t}\n};\n\n\nexport default Collada;"]}